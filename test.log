Test Example # 1
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2)chen-5101(3) starts computing...

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-24.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:1,tid:3)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:2,tid:6)
Create thread :(pid:2,tid:6)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:1,tid:9)
###end middle.
Create thread :(pid:1,tid:9)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
ClientThread> start(pid:2,tid:6)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
*******************Start update per generation
0:0.133517
1:0.133517
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3ClientThread> start(pid:1,tid:13)
,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:ClientThread> start(pid:2,tid:14)
18)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
2:7.45266e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1ClientThread> start(pid:3,tid:25)
,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:26)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1ClientThread> start(pid:2,tid:21)
,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1ClientThread> start(pid:3,tid:22)
,tid:29)
###end middle.
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.
end of program.
end used:0.033(seconds).
TestF(-7.45266e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 2
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-25.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
ClientThread> start(pid:1,tid:0)
chen-5101(2) starts computing...
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:3)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
Create thread :(pid:3,tid:2)
master> addKeyValue(pid:1,tid:6)
Create thread :(pid:1,tid:6)
Create thread :(pid:3,tid:5)
Create thread :(pid:2,tid:1)
ClientThread> start(pid:1,tid:6)
Create thread :(pid:2,tid:4)
ClientThread> start(pid:2,tid:1)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:2,tid:8)
Create thread :(pid:2,tid:8)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:2,tid:9)
###end middle.
Create thread :(pid:2,tid:9)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:2,tid:5)
Create thread :(pid:2,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2,tid:2)
ClientThread> start(pid:1,tid:3)
Create thread :(pid:2,tid:2)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:1,tid:2)
Create thread :(pid:1,tid:2)
ClientThread> start(pid:3,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
*******************Start update per generation
0:ClientThread> start(pid:2,tid:2)
0.655977
1:0.655977
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:3,tid:12)
master> addKeyValue(pid:1,tid:13)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
master > end(pid:2,tid:2)
master > end(pid:3,tid:2)
Create thread :(pid:1,tid:13)
Create thread :(pid:2,tid:11)
Create thread :(pid:2,tid:14)
Create thread :(pid:3,tid:12)
Create thread :(pid:3,tid:15)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2,tid:16)
Create thread :(pid:2,tid:16)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:2,tid:17)
Create thread :(pid:2,tid:17)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master> addKeyValue(pid:2,tid:18)
Create thread :(pid:2,tid:18)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
ClientThread> start(pid:2,tid:18)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2,tid:19)
###end middle.
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
Create thread :(pid:2,tid:19)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
Create thread :(pid:2,tid:12)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
getValue(pid:2,tid:12)
master> addKeyValue(pid:2,tid:12)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:1,tid:10)
2:5.62325e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:20)
master> addKeyValue(pid:2,tid:21)
master> addKeyValue(pid:3,tid:22)
master> addKeyValue(pid:1ClientThread> start(pid:3,tid:12)
,tid:23)
master> addKeyValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
3,tid:25)
##end init.
master > end(pid:3,tid:12)
Create thread :(pid:1,tid:23)
Create thread :(pid:2,tid:12)
Create thread :(pid:2,tid:21)
Create thread :(pid:3,tid:22)
Create thread :(pid:3,tid:25)
Create thread :(pid:2,tid:24)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2,tid:26)
Create thread :(pid:2,tid:26)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:3,tid:27)
Create thread :(pid:3,tid:27)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
master> addKeyValue(pid:2,tid:28)
Create thread :(pid:2,tid:28)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:3,tid:29)
###end middle.
Create thread :(pid:3,tid:29)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3,tid:23)
Create thread :(pid:3,tid:23)
ClientThread> start(pid:3,tid:23)
master > end(pid:3,tid:23)
getValue(pid:3,tid:23)
master> addKeyValue(pid:3,tid:23)
Create thread :(pid:3,tid:23)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:12)
master > end(pid:2,tid:12)
ClientThread> start(pid:3,tid:23)
master > end(pid:3,tid:23)
getValue(pid:3,tid:23)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:2,tid:21)
Create thread :(pid:2,tid:21)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
*******************end Start update per generation
Tic::end used:0.015client(chen-5101(1)) exit.
end of program.
client((seconds).
chen-5101(3)) exit.TestF(-5.62325e-317,100)
ends successfully!
end of program.

ClientThread> start(pid:3,tid:21)
client(chen-5101(2)) exit.
end of program.
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 3
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-26.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:6)
Create thread :(pid:3,tid:6)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:3,tid:8)
Create thread :(pid:3,tid:8)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:2,tid:9)
###end middle.
Create thread :(pid:2,tid:9)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)ClientThread> start(pid:3,tid:2)

master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
*******************Start update per generation
0:0.670764
1:0.670764
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:1,tid:13)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
Create thread :(pid:1,tid:13)
Create thread :(pid:2,tid:14)
Create thread :(pid:3,tid:15)
ClientThread> start(pid:2,tid:14)
ClientThread> start(pid:3,tid:15)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10ClientThread> start(pid:2,tid:11)
)
master> addKeyValue(pid:1,tid:18)
Create thread :(pid:1,tid:18)
ClientThread> start(pid:1,tid:13)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:3,tid:12)
master> addKeyValue(pid:2,tid:19)
###end middle.Create thread :(pid:2,tid:19)

master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:3,tid:16)
Create thread :(pid:3,tid:16)
ClientThread> start(pid:2,tid:16)
ClientThread> start(pid:1,tid:9)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master > end(pid:1,tid:9)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:16)
1,tid:16)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:1.71563e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
ClientThread> start(pid:2,tid:21)
1,tid:28ClientThread> start(pid:3,tid:16)
)
ClientThread> start(pid:3,tid:22)
master > end(pid:2,tid:21)
getValue(pid:2,tid:ClientThread> start(pid:1,tid:23)
21)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:3,tid:16)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:1,tid:16)
master > end(pid:1,tid:16)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.022(seconds).
TestF(-1.71563e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 4
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(3)
 starts computing...
chen-5101(2) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-27.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:1,tid:3)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:ClientThread> start(pid:1,tid:0)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8ClientThread> start(pid:1,tid:6)
)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:2Create thread :(pid:2,tid:9)
,tid:9)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:2Create thread :(pid:2,tid:9)
,tid:9)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
master> addKeyValue(pid:Create thread :(pid:1,tid:5)
1,tid:5)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:2Create thread :(pid:2,tid:5)
,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
*******************Start update per generation
0:0.347004
1:0.347004
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:2Create thread :(pid:2,tid:14)
,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15ClientThread> start(pid:1,tid:13)
)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
ClientThread> start(pid:1,tid:5)
master > end(pid:1,tid:5)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
ClientThread> start(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
2:1.05671e-316
refreshID=ClientThread> start(pid:2,tid:17)
0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:2Create thread :(pid:2,tid:21)
,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:2,tid:17)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:21)
3,tid:21)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:Create thread :(pid:1,tid:21)
1,tid:21)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(3)) exit.
end used:end of program.
end of program.0.023(seconds).

client(chen-5101(2)) exit.
end of program.TestF(-1.05671e-316,100)
ends successfully!

end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 5
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(3)Runing chen-5101(2) starts computing...
DE_for_PEC starts computing... 
FunName(MyBestF,Optima)

Save file:Run-configuration-28.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:1,tid:3)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:2,tid:ClientThread> start(pid:1,tid:0)
7)
Create thread :(pid:2,tid:7)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:5)
1,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:ClientThread> start(pid:2,tid:5)
5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2Create thread :(pid:2,tid:2)
,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
*******************Start update per generation
0:0.15261
1:0.15261
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2Create thread :(pid:2,tid:16)
,tid:16)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
ClientThread> start(pid:2,tid:16)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
ClientThread> start(pid:1,tid:5)
master > end(pid:1,tid:5)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3ClientThread> start(pid:1,tid:17)
,tid:18)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:14)
3,tid:14)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:14)
1,tid:14)
ClientThread> start(pid:3,tid:14)
master > end(pid:3,tid:14)
getValue(pid:3,tid:14)ClientThread> start(pid:2,tid:14)

2:5.70217e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:2,tid:14)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:ClientThread> start(pid:1,tid:14)
Create thread :(pid:1,tid:26)
1,tid:26)
master > end(pid:1,tid:14)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
###end middle.
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
master> addKeyValue(pid:Create thread :(pid:2,tid:25)
2,tid:25)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:Create thread :(pid:2,tid:22)
2,tid:22)ClientThread> start(pid:1,tid:29)

master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
master> addKeyValue(pid:Create thread :(pid:1,tid:22)
1,tid:22)
ClientThread> start(pid:2,tid:22)
master > end(pid:2,tid:22)
getValue(pid:2,tid:22)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
end of program.end of program.
end used:
client(chen-5101(3)) exit.
0.026(seconds).
end of program.
TestF(-5.70217e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 6
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(3)
 starts computing...
chen-5101(2) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-29.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
Create thread :(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3Create thread :(pid:2,tid:1)
,tid:2)
master> addKeyValue(pid:1,tid:Create thread :(pid:1,tid:3)
3)Create thread :(pid:3,tid:2)

master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:3Create thread :(pid:3,tid:5)
,tid:5)
##end init.
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:3,tid:5)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:2,tid:6)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2ClientThread> start(pid:2,tid:8)
,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2ClientThread> start(pid:2,tid:9)
,tid:9)
###end middle.
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
3,tid:1)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
getValue(pid:3,tid:1)
*******************Start update per generation
0:0.0174855
1:0.0174855
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:12)
12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:15)
15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
ClientThread> start(pid:2,tid:1)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
master > end(pid:2,tid:1)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:2,tid:18)
Create thread :(pid:2,tid:18)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
ClientThread> start(pid:2,tid:11)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:ClientThread> start(pid:3,tid:12)
17)
master> addKeyValue(pid:ClientThread> start(pid:1,tid:10)
Create thread :(pid:3,tid:19)
3,tid:19ClientThread> start(pid:3,tid:19)
)
###end middle.ClientThread> start(pid:1,tid:13)

master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:3,tid:13)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master > end(pid:1,tid:13)
getValue(pid:Create thread :(pid:3,tid:13)
1,tid:13)
master> addKeyValue(pid:1,tid:18)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
Create thread :(pid:1,tid:18)
ClientThread> start(pid:2,tid:18)
2:1.696e-316
refreshID=0
numTasks=10
numSlave=3ClientThread> start(pid:1,tid:18)

master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
ClientThread> start(pid:1,tid:20)
master> addKeyValue(pid:2Create thread :(pid:2,tid:21)
,tid:ClientThread> start(pid:2,tid:21)
21)
Create thread :(pid:3,tid:22)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1ClientThread> start(pid:1,tid:23)
,tid:23)
master> addKeyValue(pid:2,tid:24)
master> addKeyValue(pid:3,tid:25)
##end init.
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:2,tid:26)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:3,tid:Create thread :(pid:2,tid:24)
Create thread :(pid:2,tid:26)
27)
master > end(pid:1,tid:18)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
ClientThread> start(pid:2,tid:24)
Create thread :(pid:3,tid:25)
ClientThread> start(pid:2,tid:26)
Create thread :(pid:3,tid:27)
1ClientThread> start(pid:1,tid:28)
,tid:ClientThread> start(pid:3,tid:27)
28ClientThread> start(pid:3,tid:25)
)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:1,tid:29)
###end middle.
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
Create thread :(pid:1,tid:29)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
master> addKeyValue(pid:2,tid:25)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3,tid:25)
Create thread :(pid:2,tid:25)
Create thread :(pid:3,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:3,tid:13)
master > end(pid:3,tid:13)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
*******************end Start update per generation
ClientThread> start(pid:3,tid:25)
client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
Tic::end of program.end of program.
client(chen-5101(3)) exit.
end used:
end of program.
0.017(seconds).
TestF(-1.696e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 7
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-30.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:3,tid:5)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:2,tid:1)
ClientThread> start(pid:1,tid:0)
ClientThread> start(pid:3,tid:2)
master > end(pid:1,tid:0)
getValue(pid:1,tid:ClientThread> start(pid:1,tid:6)
0)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:2,tid:7)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
*******************Start update per generation
0:0.546896
1:0.546896
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)ClientThread> start(pid:2,tid:8)

master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:2,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:1,tid:13)
master> addKeyValue(pid:3,tid:17Create thread :(pid:3,tid:17)
)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:ClientThread> start(pid:2,tid:14)
3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:14)
3,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:14)
1,tid:14)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:1.85344e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
ClientThread> start(pid:2,tid:21)
ClientThread> start(pid:3,tid:22)
1,tid:28)ClientThread> start(pid:1,tid:23)

master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master > end(pid:1,tid:23)
ClientThread> start(pid:3,tid:26)
getValue(pid:1,tid:23)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:3,tid:14)
master > end(pid:3,tid:14)
ClientThread> start(pid:1,tid:14)
master > end(pid:1,tid:14)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end of program.

end used:0.027(seconds).
TestF(-1.85344e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 8
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...
chen-5101(3) starts computing...

Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-31.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:ClientThread> start(pid:3,tid:5)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
ClientThread> start(pid:1,tid:0)
getValue(pid:2,tid:1)
master> addKeyValue(pid:2,tid:9)
###end middle.Create thread :(pid:2,tid:9)

master > end(pid:1,tid:0)
ClientThread> start(pid:3,tid:2)
getValue(pid:1,tid:0)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:2,tid:6)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
*******************Start update per generation
0:0.34216
1:0.34216
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
ClientThread> start(pid:2,tid:11)
1,tid:18)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11ClientThread> start(pid:1,tid:13)
)
master> addKeyValue(pid:2,tid:ClientThread> start(pid:1,tid:6)
19)
###end middle.
Create thread :(pid:2,tid:19)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master > end(pid:1,tid:6)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:1.3886e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:25)
Create thread :(pid:2,tid:26)
2,tid:26)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
ClientThread> start(pid:2,tid:21)
1,tid:28)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:ClientThread> start(pid:1,tid:23)
2,tid:29)
###end middle.
Create thread :(pid:2,tid:29)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.023(seconds).
TestF(-1.3886e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 9
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(2) starts computing...
chen-5101(1) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
chen-5101(3) starts computing...
Save file:Run-configuration-32.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
2,tid:Create thread :(pid:2,tid:1)
1)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:2)
2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
Create thread :(pid:1,tid:3)
2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:3,tid:5)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2ClientThread> start(pid:1,tid:3)
)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:6)
6)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
ClientThread> start(pid:3,tid:5)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3Create thread :(pid:3,tid:9)
,tid:9)
###end middle.
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9ClientThread> start(pid:1,tid:0)
)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
3,tid:1)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:1)
1,tid:1)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
*******************Start update per generation
0:0.253797
1:0.253797
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
ClientThread> start(pid:1,tid:13)
getValue(pid:3,tid:16)
master> addKeyValue(pid:3Create thread :(pid:3,tid:17)
,tid:17)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:Create thread :(pid:3,tid:14)
3,tid:14)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:14)
1,tid:14)
ClientThread> start(pid:3,tid:14)
master > end(pid:3,tid:14)
getValue(pid:3,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:14)
3,tid:14)
ClientThread> start(pid:1,tid:1)
master > end(pid:1,tid:1)
ClientThread> start(pid:3,tid:14)
master > end(pid:3,tid:14)
getValue(pid:3,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:14)
3,tid:14)
ClientThread> start(pid:3,tid:14)
master > end(pid:3,tid:14)
getValue(pid:3,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:14)
3,tid:14)
ClientThread> start(pid:3,tid:14)
ClientThread> start(pid:1,tid:14)
master > end(pid:1,tid:14)
getValue(pid:1,tid:14)
master> addKeyValue(pid:Create thread :(pid:1,tid:14)
1,tid:14)
master > end(pid:3,tid:14)
getValue(pid:3,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:14)
3,tid:14)
ClientThread> start(pid:3,tid:14)
master > end(pid:3,tid:14)
getValue(pid:3,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:14)
3,tid:14)
ClientThread> start(pid:3,tid:14)
master > end(pid:3,tid:14)
getValue(pid:3,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:14)
3,tid:14)ClientThread> start(pid:2,tid:14)

master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:3,tid:14)
master > end(pid:3,tid:14)
getValue(pid:3,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:11)
3,tid:11)
ClientThread> start(pid:3,tid:11)
master > end(pid:3,tid:11)
getValue(pid:3,tid:11)
2:8.57379e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
ClientThread> start(pid:2,tid:11)
master> addKeyValue(pid:3,tid:22)
master> addKeyValue(pid:1Create thread :(pid:1,tid:23)
,tid:Create thread :(pid:3,tid:22)
23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:3,tid:25)
##end init.
master > end(pid:2,tid:11)
Create thread :(pid:3,tid:25)
ClientThread> start(pid:1,tid:14)
master > end(pid:1,tid:14)
ClientThread> start(pid:1,tid:23)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:1,tid:29)
Create thread :(pid:1,tid:29)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
master> addKeyValue(pid:Create thread :(pid:3,tid:24)
3,tid:24)
ClientThread> start(pid:3,tid:24)
master > end(pid:3,tid:24)
getValue(pid:3,tid:24)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
end of program.
end of program.
end used:client(chen-5101(3)) exit.
0.031end of program.
(seconds).
TestF(-8.57379e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 10
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...
chen-5101(3) starts computing...

Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-33.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1Create thread :(pid:1,tid:0)
,tid:0)
master> addKeyValue(pid:2Create thread :(pid:2,tid:1)
,tid:1)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:2)
2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:3,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:2,tid:1)
master > end(pid:1,tid:0)
ClientThread> start(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:1,tid:9)
###end middle.
Create thread :(pid:1,tid:9)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:2,tid:6)
Create thread :(pid:2,tid:6)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:ClientThread> start(pid:3,tid:6)
3,tid:2)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
*******************Start update per generation
0:0.959287
1:0.959287
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:15)
2,tid:16)
Create thread :(pid:2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)ClientThread> start(pid:2,tid:11)

master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
master > end(pid:2,tid:11)
getValue(pid:2,tid:ClientThread> start(pid:3,tid:12)
11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
ClientThread> start(pid:2,tid:6)
Create thread :(pid:3,tid:13)
master> addKeyValue(pid:3,tid:13)
master > end(pid:2,tid:6)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13ClientThread> start(pid:2,tid:19)
)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:8.55355e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2ClientThread> start(pid:3,tid:13)
,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:3,tid:13)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20ClientThread> start(pid:2,tid:21)
)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:ClientThread> start(pid:3,tid:22)
27)
master > end(pid:2,tid:21)
getValue(pid:ClientThread> start(pid:1,tid:23)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)ClientThread> start(pid:3,tid:25)

master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
endend of program.
end of program.
 used:0.026(seconds).
ClientThread> start(pid:2,tid:29)
TestF(-8.55355e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 11
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(2) starts computing...chen-5101(3) starts computing...
 starts computing...

Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-34.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1Create thread :(pid:1,tid:0)
,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3Create thread :(pid:3,tid:2)
,tid:2Create thread :(pid:2,tid:1)
)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:2,tid:4)Create thread :(pid:2,tid:4)

master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:ClientThread> start(pid:2,tid:4)
3)
ClientThread> start(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:1,tid:9)ClientThread> start(pid:3,tid:2)

###end middle.
Create thread :(pid:1,tid:9)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2ClientThread> start(pid:2,tid:1)
)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
*******************Start update per generation
0:0.445386
1:0.445386
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2ClientThread> start(pid:2,tid:6)
,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:2,tid:6)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16ClientThread> start(pid:1,tid:13)
)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:2,tid:14)
master> addKeyValue(pid:1,tid:17)Create thread :(pid:1,tid:17)

master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
ClientThread> start(pid:2,tid:18)
1,tid:19)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
2:1.66058e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:ClientThread> start(pid:2,tid:21)
20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
ClientThread> start(pid:1,tid:23)
ClientThread> start(pid:3,tid:22)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
###end middle.
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
ClientThread> start(pid:2,tid:19)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:19)
master > end(pid:2,tid:27)
getValue(pid:ClientThread> start(pid:1,tid:28)
2,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.027(seconds).
TestF(-1.66058e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 12
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2)
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-35.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
chen-5101(3) starts computing...
1,tid:0)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
2,tid:1)
master> addKeyValue(pid:Create thread :(pid:3,tid:2)
3,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:3,tid:5Create thread :(pid:3,tid:5)
)
##end init.
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:6)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:2,tid:9)
###end middle.Create thread :(pid:2,tid:9)

ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:1,tid:5)
Create thread :(pid:1,tid:5)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:2,tid:5)
Create thread :(pid:2,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2,tid:2)
Create thread :(pid:2,tid:2)
ClientThread> start(pid:1,tid:5)
master > end(pid:1,tid:5)
getValue(pid:1,tid:5)
master> addKeyValue(pid:1,tid:Create thread :(pid:1,tid:2)
2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
*******************Start update per generation
0:0.0992949
1:0.0992949
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:3,tid:12Create thread :(pid:1,tid:10)
)
master> addKeyValue(pid:1,tid:13)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
Create thread :(pid:1,tid:13)
Create thread :(pid:3,tid:12)
Create thread :(pid:3,tid:15)
Create thread :(pid:2,tid:11)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
Create thread :(pid:2,tid:14)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:ClientThread> start(pid:1,tid:13)
2,tid:16)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2ClientThread> start(pid:3,tid:12)
,tid:ClientThread> start(pid:3,tid:15)
ClientThread> start(pid:2,tid:11)
17)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3,tid:18)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3,tid:19)
###end middle.
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
Create thread :(pid:3,tid:18)
Create thread :(pid:3,tid:19)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:3,tid:19)
getValue(pid:3,tid:18)
2:1.65917e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:3ClientThread> start(pid:2,tid:19)
,tid:25)
##end init.
master > end(pid:3,tid:19)
master > end(pid:2,tid:19)
Create thread :(pid:3,tid:22)
Create thread :(pid:3,tid:25)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:1,tid:27)
Create thread :(pid:1,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:2,tid:28)
Create thread :(pid:2,tid:28)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:1,tid:29)
###end middle.
Create thread :(pid:1,tid:29)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:2,tid:29)
Create thread :(pid:2,tid:29)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:1,tid:25)
Create thread :(pid:1,tid:25)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
*******************end Start update per generation
Tic::end used:0.027client(chen-5101(1)) exit.
client((seconds).
chen-5101(2)) exit.
TestF(-1.65917e-316,100)
ends successfully!
end of program.end of program.

end of program.client(chen-5101(3)) exit.

end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 13
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-36.txt
chen-5101(2) starts computing...
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:3,tid:2)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:6)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:3,tid:7)
Create thread :(pid:3,tid:6)
Create thread :(pid:3,tid:7)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:3,tid:8)
Create thread :(pid:3,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:3,tid:9)
###end middle.
Create thread :(pid:3,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:4)
1,tid:4)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
3,tid:1)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
getValue(pid:3,tid:1)
*******************Start update per generation
0:0.801209
1:0.801209
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
ClientThread> start(pid:2,tid:1)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:3Create thread :(pid:2,tid:14)
,tid:15Create thread :(pid:3,tid:15)
)
##end init.
master > end(pid:2,tid:1)
ClientThread> start(pid:1,tid:4)
master > end(pid:1,tid:4)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2,tid:16)
Create thread :(pid:2,tid:16)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2ClientThread> start(pid:2,tid:18)
,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2ClientThread> start(pid:2,tid:19)
,tid:19)
###end middle.
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:1,tid:15)
Create thread :(pid:1,tid:15)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:ClientThread> start(pid:2,tid:14)
3Create thread :(pid:3,tid:14)
,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
2:1.27163e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:2,tid:21)
Create thread :(pid:2,tid:21)
master> addKeyValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1Create thread :(pid:3,tid:22)
,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:1,tid:15)
master > end(pid:1,tid:15)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3Create thread :(pid:3,tid:26)
,tid:26)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
ClientThread> start(pid:1,tid:23)
getValue(pid:3,tid:26)
master> addKeyValue(pid:3,tid:27)
Create thread :(pid:3,tid:27)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:1,tid:28)
Create thread :(pid:1,tid:28)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:Create thread :(pid:3,tid:24)
3,tid:24)
ClientThread> start(pid:3,tid:14)
master > end(pid:3,tid:14)
ClientThread> start(pid:3,tid:24)
master > end(pid:3,tid:24)
getValue(pid:3,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:24)
3,tid:24)
ClientThread> start(pid:1,tid:28)
ClientThread> start(pid:3,tid:24)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:24)
1,tid:24)
master > end(pid:3,tid:24)
getValue(pid:3,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:24)
3,tid:24)
ClientThread> start(pid:3,tid:24)
master > end(pid:3,tid:24)
getValue(pid:3,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:24)
3,tid:24)
ClientThread> start(pid:3,tid:24)
master > end(pid:3,tid:24)
getValue(pid:3,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:24)
3,tid:24)
ClientThread> start(pid:3,tid:24)
master > end(pid:3,tid:24)
getValue(pid:3,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:24)
3,tid:24)
ClientThread> start(pid:3,tid:24)
master > end(pid:3,tid:24)
getValue(pid:3,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:24)
3,tid:24)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:3,tid:24)
master > end(pid:3,tid:24)
getValue(pid:3,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:21)
3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(3)) exit.
endend of program.
end of program.
 used:client(chen-5101(2)) exit.
0.032end of program.
(seconds).
TestF(-1.27163e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 14
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...chen-5101(3)

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-37.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1Create thread :(pid:1,tid:0)
,tid:0)
master> addKeyValue(pid:2Create thread :(pid:2,tid:1)
,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:Create thread :(pid:3,tid:2)
3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:1,tid:ClientThread> start(pid:2,tid:4)
7)
Create thread :(pid:1,tid:7)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
*******************Start update per generation
0:0.892581
1:0.892581
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:1,tid:13)
master> addKeyValue(pid:3,tid:18)
Create thread :(pid:3,tid:18)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)ClientThread> start(pid:2,tid:14)

master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
2:1.87914e-316
refreshID=0
numTasks=ClientThread> start(pid:2,tid:16)
10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:1,tid:23)
master> addKeyValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
3,tid:25)
##end init.
Create thread :(pid:2,tid:24)
master > end(pid:2,tid:16)
Create thread :(pid:3,tid:25)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
ClientThread> start(pid:1,tid:23)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
Create thread :(pid:2,tid:26)
master> addKeyValue(pid:2,tid:26)ClientThread> start(pid:2,tid:21)
ClientThread> start(pid:2,tid:26)
ClientThread> start(pid:3,tid:25)
ClientThread> start(pid:3,tid:22)

master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3,tid:29)
###end middle.
Create thread :(pid:3,tid:29)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
*******************end Start update per generation
client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end of program.
Tic::end used:
0.039(seconds).
TestF(-1.87914e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 15
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2)chen-5101(3) starts computing...

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-38.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:1,tid:0)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:1,tid:0)
ClientThread> start(pid:1,tid:6)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:1,tid:Create thread :(pid:1,tid:9)
9)
###end middle.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:5)
1,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
*******************Start update per generation
0:0.511272
1:0.511272
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:ClientThread> start(pid:2,tid:5)
15)
master> addKeyValue(pid:3Create thread :(pid:3,tid:16)
,tid:16)
master > end(pid:2,tid:5)
ClientThread> start(pid:1,tid:5)
master > end(pid:1,tid:5)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)ClientThread> start(pid:1,tid:13)

master> addKeyValue(pid:3,tid:18)
Create thread :(pid:3,tid:18)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2,tid:19)Create thread :(pid:2,tid:19)

ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
ClientThread> start(pid:1,tid:19)
Create thread :(pid:3,tid:19)
master> addKeyValue(pid:3,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
2:1.40641e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:ClientThread> start(pid:2,tid:19)
22)
master> addKeyValue(pid:ClientThread> start(pid:1,tid:23)
Create thread :(pid:3,tid:27)
3,tid:27ClientThread> start(pid:2,tid:24)
)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
master > end(pid:2,tid:19)
ClientThread> start(pid:3,tid:26)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)ClientThread> start(pid:2,tid:29)

master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.025(seconds).
TestF(-1.40641e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 16
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-39.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:1,tid:3)
ClientThread> start(pid:3,tid:5)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:1,tid:6)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:2,tid:7)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:8)
Create thread :(pid:1,tid:6)
ClientThread> start(pid:2,tid:4)
Create thread :(pid:2,tid:7)
Create thread :(pid:3,tid:8)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:3,tid:9)
###end middle.
ClientThread> start(pid:1,tid:0)
ClientThread> start(pid:3,tid:2)
Create thread :(pid:3,tid:9)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
ClientThread> start(pid:3,tid:8)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:1,tid:7)
Create thread :(pid:1,tid:7)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:2,tid:9)
ClientThread> start(pid:2,tid:7)
Create thread :(pid:2,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
*******************Start update per generation
0:0.719165
1:0.719165
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:3,tid:12)
master> addKeyValue(pid:1,tid:13)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
Create thread :(pid:1,tid:10)
Create thread :(pid:1,tid:13)
Create thread :(pid:2,tid:11)
Create thread :(pid:2,tid:14)
ClientThread> start(pid:3,tid:9)
Create thread :(pid:3,tid:12)
Create thread :(pid:3,tid:15)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
ClientThread> start(pid:2,tid:14)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3,tid:16)
master > end(pid:2,tid:14)
getValue(pid:2Create thread :(pid:3,tid:16)
,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:ClientThread> start(pid:1,tid:7)
ClientThread> start(pid:2,tid:11)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1ClientThread> start(pid:2,tid:9)
,tid:18)
master > end(pid:1,tid:7)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2ClientThread> start(pid:2,tid:17)
,tid:19)
###end middle.
master > end(pid:2,tid:9)
master > end(pid:2,tid:17)
getValue(pid:2,tid:ClientThread> start(pid:1,tid:10)
17)ClientThread> start(pid:3,tid:12)

master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
2:1.8927e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3ClientThread> start(pid:2,tid:19)
ClientThread> start(pid:1,tid:23)
,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:24)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
master > end(pid:2,tid:19)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end of program.
Tic::
end used:0.026(seconds).
TestF(-1.8927e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 17
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2)chen-5101(3) starts computing...

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-40.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)Create thread :(pid:2,tid:1)

master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:3,tid:2)
Create thread :(pid:1,tid:3)
Create thread :(pid:3,tid:5)
Create thread :(pid:2,tid:4)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:ClientThread> start(pid:2,tid:1)
3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:ClientThread> start(pid:2,tid:6)
7)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
*******************Start update per generation
0:0.0384306
1:0.0384306
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:8)
Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
ClientThread> start(pid:2,tid:8)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:2,tid:8)
master > end(pid:3,tid:8)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:12)
Create thread :(pid:2,tid:17)
2,tid:17)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
ClientThread> start(pid:3,tid:18)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
2:1.05368e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:ClientThread> start(pid:1,tid:23)
28)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:1,tid:20)
###end middle.
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end used:end of program.end of program.
0.053(seconds).

TestF(-1.05368e-316,100)
ends successfully!
end of program.
client(chen-5101(1)) exit.
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 18
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(3) starts computing...

chen-5101(2) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-41.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2Create thread :(pid:2,tid:1)
,tid:1)
master> addKeyValue(pid:3,tid:2)Create thread :(pid:3,tid:2)

master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3Create thread :(pid:3,tid:6)
,tid:6)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:3Create thread :(pid:3,tid:7)
,tid:7)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:4)
1,tid:4)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:3Create thread :(pid:3,tid:4)
,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
*******************Start update per generation
0:0.893452
1:0.893452
ClientThread> start(pid:1,tid:4)
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:3,tid:12)
master> addKeyValue(pid:1,tid:13)
Create thread :(pid:2,tid:11)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
master > end(pid:1,tid:4)
Create thread :(pid:2,tid:14)
Create thread :(pid:3,tid:12)
Create thread :(pid:1,tid:10)
Create thread :(pid:3,tid:15)
Create thread :(pid:1,tid:13)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:16)
1,tid:16)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:1,tid:10)
master> addKeyValue(pid:2,tid:18Create thread :(pid:2,tid:18)
)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:1,tid:19)
###end middle.ClientThread> start(pid:1,tid:16)

master > end(pid:1,tid:16)
Create thread :(pid:1,tid:19)
getValue(pid:1,tid:16)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:2Create thread :(pid:2,tid:19)
,tid:19)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
2:1.85931e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:3Create thread :(pid:3,tid:27)
,tid:27)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:3Create thread :(pid:3,tid:29)
,tid:29)
###end middle.
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:24)
1,tid:24)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
ClientThread> start(pid:1,tid:24)
master > end(pid:1,tid:24)
getValue(pid:1,tid:24)
master> addKeyValue(pid:Create thread :(pid:1,tid:24)
1,tid:24)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:24)
3,tid:24)
ClientThread> start(pid:3,tid:24)
master > end(pid:3,tid:24)
getValue(pid:3,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:24)
3,tid:24)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
*******************end Start update per generation
Tic::end used:0.038client(client(chen-5101(2)) exit.
(seconds).
chen-5101(1)end of program.
) exit.
client(chen-5101(3)end of program.
) exit.
end of program.
TestF(-1.85931e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 19
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(2) starts computing...
 starts computing...
Runing DE_for_PEC 
chen-5101(3)FunName(MyBestF,Optima)
 starts computing...Save file:
Run-configuration-42.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
2Create thread :(pid:2,tid:1)
,tid:1)
master> addKeyValue(pid:3Create thread :(pid:3,tid:2)
,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:2,tid:4)
Create thread :(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:3,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)ClientThread> start(pid:1,tid:3)

master> addKeyValue(pid:3,tid:7)
Create thread :(pid:3,tid:7)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:1,tid:8)
Create thread :(pid:1,tid:8)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:1,tid:4)Create thread :(pid:1,tid:4)

ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
3,tid:1)
ClientThread> start(pid:1,tid:4)
master > end(pid:1,tid:4)
getValue(pid:1,tid:4)
master> addKeyValue(pid:Create thread :(pid:1,tid:1)
1,tid:1)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
getValue(pid:3,tid:1)
*******************Start update per generation
0:0.621487
1:0.621487
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:3Create thread :(pid:3,tid:12)
,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2Create thread :(pid:2,tid:18)
,tid:18)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3Create thread :(pid:3,tid:19)
,tid:19)
###end middle.
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:ClientThread> start(pid:1,tid:17)
2,tid:18)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
master> addKeyValue(pid:Create thread :(pid:1,tid:16)
1,tid:16)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:1,tid:1)
master > end(pid:1,tid:1)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
2:1.44607e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:20)
Create thread :(pid:1,tid:20)
master> addKeyValue(pid:2Create thread :(pid:2,tid:21)
,tid:21)
master> addKeyValue(pid:3Create thread :(pid:3,tid:22)
,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:3Create thread :(pid:3,tid:29)
,tid:29)
###end middle.
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
ClientThread> start(pid:1,tid:16)
getValue(pid:1,tid:23)
master > end(pid:1,tid:16)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:22)
1,tid:22)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:3Create thread :(pid:3,tid:21)
,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.
endclient(chen-5101(2)) exit.
 used:end of program.
0.022(seconds).
TestF(-1.44607e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 20
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing chen-5101(1) starts computing...DE_for_PEC
 
FunName(MyBestF,Optima)
Save file:Run-configuration-43.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
2,tid:1)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:2)
2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3Create thread :(pid:3,tid:6)
,tid:6)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:3,tid:8)
Create thread :(pid:3,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:3,tid:9)
###end middle.
Create thread :(pid:3,tid:9)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:2,tid:ClientThread> start(pid:2,tid:1)
Create thread :(pid:2,tid:2)
2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
master> addKeyValue(pid:2,tid:2)
Create thread :(pid:2,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
master> addKeyValue(pid:2,tid:2)
Create thread :(pid:2,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
master> addKeyValue(pid:2,tid:2)
Create thread :(pid:2,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
master> addKeyValue(pid:2,tid:2)
Create thread :(pid:2,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
master> addKeyValue(pid:2,tid:2)
Create thread :(pid:2,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
master> addKeyValue(pid:2,tid:2)
Create thread :(pid:2,tid:2)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:3,tid:2)
*******************Start update per generation
0:0.477703
1:0.477703
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:13)
master> addKeyValue(pid:2,tid:14)
Create thread :(pid:2,tid:11)
master> addKeyValue(pid:3,tid:15)
##end init.
master > end(pid:3,tid:2)
Create thread :(pid:1,tid:13)
Create thread :(pid:2,tid:14)
Create thread :(pid:3,tid:12)
Create thread :(pid:3,tid:15)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3,tid:16)
Create thread :(pid:3,tid:16)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2,tid:17)
Create thread :(pid:2,tid:17)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:3,tid:18)
Create thread :(pid:3,tid:18)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master> addKeyValue(pid:2,tid:19)
###end middle.
Create thread :(pid:2,tid:19)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
getValue(pid:2,tid:13)
master> addKeyValue(pid:2,tid:13)
Create thread :(pid:2,tid:13)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:1,tid:10)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:1,tid:12)
Create thread :(pid:1,tid:12)
ClientThread> start(pid:1,tid:12)
master > end(pid:1,tid:12)
getValue(pid:1,tid:12)
2:5.46945e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:20)
master> addKeyValue(pid:2,tid:21)
master> addKeyValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
1,tid:23)
master> addKeyValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:25)
##end init.
Create thread :(pid:2,tid:24)
Create thread :(pid:3,tid:25)
Create thread :(pid:1,tid:20)
Create thread :(pid:1,tid:23)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:ClientThread> start(pid:2,tid:24)
3ClientThread> start(pid:1,tid:23)
,tid:22)
master> addKeyValue(pid:3,tid:26)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:1,tid:27)
master > end(pid:2,tid:24)
Create thread :(pid:3,tid:26)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2,tid:28)
Create thread :(pid:2,tid:28)
Create thread :(pid:1,tid:27)
ClientThread> start(pid:3,tid:26)
ClientThread> start(pid:2,tid:28)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:3,tid:29)
###end middle.
master > end(pid:2,tid:28)
getValue(pid:2,tid:28Create thread :(pid:3,tid:29)
)
master > end(pid:3,tid:12)
ClientThread> start(pid:3,tid:12)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
ClientThread> start(pid:1,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
master > end(pid:1,tid:27)
ClientThread> start(pid:3,tid:27)
getValue(pid:1,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:2,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)Create thread :(pid:2,tid:21)

master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:2,tid:21)
Create thread :(pid:2,tid:21)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:2,tid:21)
Create thread :(pid:2,tid:21)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:ClientThread> start(pid:2,tid:13)
1,tid:20)
ClientThread> start(pid:2,tid:21)
*******************end Start update per generation
Tic::end used:0.016(seconds).
client(chen-5101(3)) exit.
client(chen-5101(2)) exit.end of program.

TestF(-5.46945e-317,100)
client(chen-5101(1)) exit.
end of program.
ends successfully!end of program.

end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 21
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...
chen-5101(3)
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-44.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:Create thread :(pid:1,tid:0)
1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:1,tid:0)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
ClientThread> start(pid:3,tid:2)
2,tid:2)
master > end(pid:3,tid:2)
ClientThread> start(pid:1,tid:8)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:2)
3,tid:2)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
*******************Start update per generation
0:0.322313
1:0.322313
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2ClientThread> start(pid:3,tid:15)
,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:1,tid:13)
master> addKeyValue(pid:2,tid:Create thread :(pid:2,tid:18)
18)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1ClientThread> start(pid:3,tid:12)
,tid:19)
###end middle.
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:ClientThread> start(pid:1,tid:19)
19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
2:1.26455e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
ClientThread> start(pid:3,tid:19)
master> addKeyValue(pid:3,tid:25)
##end init.
Create thread :(pid:3,tid:25)
master > end(pid:3,tid:19)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:2,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:25)
1,tid:ClientThread> start(pid:2,tid:27)
25)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:25)
2,tid:25)
ClientThread> start(pid:3,tid:25)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.
end of program.
end used:0.021(seconds).
TestF(-1.26455e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 22
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
chen-5101(2) starts computing...
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
ClientThread> start(pid:2,tid:4)
Create thread :(pid:2,tid:6)
chen-5101(3) starts computing...
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-45.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:2,tid:6)
ClientThread> start(pid:1,tid:3)
ClientThread> start(pid:2,tid:6)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:1,tid:7)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:2,tid:8)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:3,tid:9)
###end middle.
Create thread :(pid:1,tid:7)
ClientThread> start(pid:3,tid:2)
Create thread :(pid:3,tid:9)
Create thread :(pid:2,tid:8)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1ClientThread> start(pid:1,tid:7)
,tid:0ClientThread> start(pid:2,tid:1)
)
ClientThread> start(pid:2,tid:8)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:2,tid:5)
Create thread :(pid:2,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:ClientThread> start(pid:3,tid:9)
3,tid:5)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
*******************Start update per generation
0:0.642624
1:0.642624
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15ClientThread> start(pid:2,tid:5)
)
##end init.
master > end(pid:2,tid:5)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17ClientThread> start(pid:3,tid:16)
)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
ClientThread> start(pid:2,tid:11)
1,tid:19)
###end middle.
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)ClientThread> start(pid:3,tid:17)

master > end(pid:3,tid:17)
getValue(pid:3,tid:ClientThread> start(pid:1,tid:8)
17ClientThread> start(pid:2,tid:14)
)
master > end(pid:1,tid:8)
master > end(pid:2,tid:14)
getValue(pid:2ClientThread> start(pid:3,tid:18)
,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:13)
2,tid:13)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
master> addKeyValue(pid:Create thread :(pid:3,tid:13)
3,tid:13)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
2:7.86954e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:13)
master > end(pid:3,tid:13)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:ClientThread> start(pid:2,tid:21)
20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
master > end(pid:2,tid:21)
getValue(pid:ClientThread> start(pid:1,tid:23)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:1,tid:23)
getValue(pid:1,tid:ClientThread> start(pid:2,tid:26)
23)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27ClientThread> start(pid:2,tid:29)
)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end of program.

end used:0.02(seconds).
TestF(-7.86954e-317,100)
ends successfully!
end of program.
.
.
.
Test Example # 23
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-46.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:6)
Create thread :(pid:3,tid:6)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:3,tid:7)
Create thread :(pid:3,tid:7)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:3,tid:8)
Create thread :(pid:3,tid:8)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
3,tid:1)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:ClientThread> start(pid:1,tid:0)
1)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
2,tid:1)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
*******************Start update per generation
0:0.951187
1:0.951187
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:ClientThread> start(pid:3,tid:15)
16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:ClientThread> start(pid:1,tid:13)
Create thread :(pid:2,tid:18)
2,tid:18)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
2:1.97001e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
Create thread :(pid:1,tid:20)
master> addKeyValue(pid:3,tid:25)
##end init.
Create thread :(pid:3,tid:25)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
Create thread :(pid:1,tid:23)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.022(seconds).
TestF(-1.97001e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 24
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2)
chen-5101(3) starts computing...
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-47.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2Create thread :(pid:1,tid:0)
Create thread :(pid:2,tid:1)
,tid:1)
master> addKeyValue(pid:3,tid:2)
Create thread :(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
getValue(pid:1,tid:3)
ClientThread> start(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
master > end(pid:1,tid:0)
getValue(pid:1ClientThread> start(pid:3,tid:2)
,tid:0)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:ClientThread> start(pid:2,tid:9)
9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
*******************Start update per generation
0:0.440974
1:0.440974
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2,tid:17)
Create thread :(pid:2,tid:17)
ClientThread> start(pid:1,tid:13)
ClientThread> start(pid:3,tid:15)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:1,tid:18)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
Create thread :(pid:1,tid:18)
master> addKeyValue(pid:3,tid:19)
###end middle.
Create thread :(pid:3,tid:19)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:1,tid:18)
ClientThread> start(pid:3,tid:19)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
2:9.61802e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:1,tid:ClientThread> start(pid:2,tid:21)
28)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
Create thread :(pid:1,tid:28)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:ClientThread> start(pid:3,tid:22)
29)
###end middle.ClientThread> start(pid:1,tid:23)
ClientThread> start(pid:3,tid:17)

master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master > end(pid:3,tid:17)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1ClientThread> start(pid:2,tid:29)
,tid:28)
master> addKeyValue(pid:1,tid:27Create thread :(pid:1,tid:27)
)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end of program.
end used:
0.027(seconds).
TestF(-9.61802e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 25
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2)Runing DE_for_PEC 
FunName(MyBestF,Optima)
chen-5101(3) starts computing...Save file:
Run-configuration-48.txt starts computing...

Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
Create thread :(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:1,tid:3)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:1,tid:6)
Create thread :(pid:1,tid:6)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:ClientThread> start(pid:1,tid:0)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)ClientThread> start(pid:1,tid:6)

###end middle.
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:2Create thread :(pid:2,tid:5)
,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
ClientThread> start(pid:1,tid:9)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
master> addKeyValue(pid:Create thread :(pid:1,tid:5)
1,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2Create thread :(pid:2,tid:5)
,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
*******************Start update per generation
0:0.252938
1:0.252938
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)ClientThread> start(pid:3,tid:2)

master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:3,tid:2)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
ClientThread> start(pid:1,tid:5)
master > end(pid:1,tid:5)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:1,tid:15)
Create thread :(pid:1,tid:15)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
2:1.73971e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:20)
master> addKeyValue(pid:2,tid:21)
master> addKeyValue(pid:3,tid:22)
master> addKeyValue(pid:1,tid:23)
master> addKeyValue(pid:2,tid:24)
master> addKeyValue(pid:3,tid:25)
##end init.
ClientThread> start(pid:2,tid:11)
Create thread :(pid:2,tid:15)
Create thread :(pid:2,tid:21)
Create thread :(pid:2,tid:24)
ClientThread> start(pid:3,tid:15)
Create thread :(pid:3,tid:22)
Create thread :(pid:3,tid:25)
Create thread :(pid:1,tid:20)
Create thread :(pid:1,tid:23)
ClientThread> start(pid:2,tid:15)
master > end(pid:2,tid:15)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
ClientThread> start(pid:3,tid:25)
getValue(pid:ClientThread> start(pid:2,tid:24)
ClientThread> start(pid:1,tid:27)
1,tid:20)
master > end(pid:1,tid:27)
getValue(pid:ClientThread> start(pid:1,tid:15)
1,tid:27)
master> addKeyValue(pid:1Create thread :(pid:1,tid:25)
,tid:25)
master > end(pid:1,tid:15)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:25)
2,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
*******************end Start update per generation
Tic::end used:0.03(seconds).
client(chen-5101(1)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.
TestF(-1.73971e-316,100)
ends successfully!
end of program.
client(chen-5101(2)) exit.
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 26
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...

Runing chen-5101(3) starts computing...
DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-49.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
Create thread :(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:1,tid:3)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:1,tid:8)
Create thread :(pid:1,tid:8)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:3Create thread :(pid:3,tid:9)
,tid:9)
###end middle.
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
*******************Start update per generation
0:0.772203
1:0.772203
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:3,tid:12)
Create thread :(pid:3,tid:12)
master> addKeyValue(pid:1,tid:13)
Create thread :(pid:1,tid:13)
master> addKeyValue(pid:2Create thread :(pid:2,tid:14)
,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:2)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:2)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3Create thread :(pid:3,tid:16)
,tid:16)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
ClientThread> start(pid:2,tid:11)
ClientThread> start(pid:3,tid:17)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2Create thread :(pid:2,tid:18)
,tid:18)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:ClientThread> start(pid:3,tid:19)
13ClientThread> start(pid:2,tid:14)
)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2Create thread :(pid:2,tid:16)
,tid:16)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
2:1.47319e-316
refreshID=0ClientThread> start(pid:2,tid:16)

numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:2Create thread :(pid:2,tid:21)
,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:3Create thread :(pid:3,tid:25)
,tid:25)
##end init.
master > end(pid:2,tid:16)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)ClientThread> start(pid:1,tid:20)

master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:Create thread :(pid:1,tid:22)
1,tid:22)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:22)
2,tid:22)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
*******************end Start update per generation
Tic::end used:0.023client(client(chen-5101(3)) exit.
(seconds).
chen-5101(1)end of program.
) exit.
client(chen-5101(2)end of program.
) exit.
end of program.
TestF(-1.47319e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 27
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(2)chen-5101(3) starts computing...
 starts computing...
Runing chen-5101(1) starts computing...
DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-50.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1Create thread :(pid:1,tid:0)
,tid:0)
master> addKeyValue(pid:2,tid:1)
Create thread :(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:Create thread :(pid:3,tid:2)
3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:1Create thread :(pid:1,tid:8)
,tid:8)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.ClientThread> start(pid:1,tid:0)

master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:1,tid:9)
Create thread :(pid:1,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
master> addKeyValue(pid:1,tid:2)
Create thread :(pid:1,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:1,tid:2)
Create thread :(pid:1,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:1,tid:2)
Create thread :(pid:1,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:1Create thread :(pid:1,tid:2)
,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:1,tid:2)
Create thread :(pid:1,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:1Create thread :(pid:1,tid:2)
,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:1Create thread :(pid:1,tid:2)
,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:1Create thread :(pid:1,tid:2)
,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:1Create thread :(pid:1,tid:2)
,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:1Create thread :(pid:1,tid:2)
,tid:2)
ClientThread> start(pid:3,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
3,tid:1)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
master> addKeyValue(pid:1,tid:1)
Create thread :(pid:1,tid:1)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
getValue(pid:3,tid:1)
*******************Start update per generation
0:0.121797
1:0.121797
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:ClientThread> start(pid:1,tid:1)
11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
master > end(pid:1,tid:1)
Create thread :(pid:3,tid:15)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:1,tid:17)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
2,tid:18)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)Create thread :(pid:2,tid:18)

master> addKeyValue(pid:3,tid:19)
###end middle.
Create thread :(pid:3,tid:19)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
ClientThread> start(pid:2,tid:18)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
2:8.82675e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3Create thread :(pid:3,tid:27)
,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28ClientThread> start(pid:2,tid:18)
)
master > end(pid:2,tid:18)
ClientThread> start(pid:3,tid:27)
ClientThread> start(pid:2,tid:29)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
master> addKeyValue(pid:Create thread :(pid:2,tid:23)
2,tid:23)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:22)
1,tid:22)
ClientThread> start(pid:2,tid:23)
master > end(pid:2,tid:23)
getValue(pid:2,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:22)
2,tid:22)
ClientThread> start(pid:1,tid:22)
master > end(pid:1,tid:22)
getValue(pid:1,tid:22)
*******************end Start update per generation
Tic::client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
endend of program.
end of program.
 used:client(chen-5101(1)) exit.
0.034end of program.
(seconds).
TestF(-8.82675e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 28
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2)chen-5101(3) starts computing...

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-51.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
Create thread :(pid:2,tid:1)
##end init.
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:3,tid:5)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:1,tid:3)
master> addKeyValue(pid:2,tid:6)
Create thread :(pid:2,tid:6)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1ClientThread> start(pid:1,tid:0)
)
ClientThread> start(pid:2,tid:6)
master> addKeyValue(pid:2,tid:9)
###end middle.
Create thread :(pid:2,tid:9)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
*******************Start update per generation
0:0.538618
1:0.538618
refreshID=0
numTasks=ClientThread> start(pid:1,tid:7)
10
numSlave=3
master> addKeyValue(pid:1Create thread :(pid:1,tid:10)
,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:1,tid:7)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
ClientThread> start(pid:3,tid:19)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
2:7.63884e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:1,tid:23)
master> addKeyValue(pid:2,tid:24)
master> addKeyValue(pid:3,tid:25)
Create thread :(pid:1,tid:23)
##end init.
Create thread :(pid:2,tid:24)
Create thread :(pid:3,tid:25)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:26)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)ClientThread> start(pid:2,tid:18)

master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:18)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2,tid:28)
Create thread :(pid:2,tid:28)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:2,tid:29)
###end middle.Create thread :(pid:2,tid:29)

ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
ClientThread> start(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:25)
1,tid:25)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:25)
2,tid:25)
ClientThread> start(pid:1,tid:25)
master > end(pid:1,tid:25)
getValue(pid:1,tid:25)
master> addKeyValue(pid:1,tid:Create thread :(pid:1,tid:25)
25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:1,tid:25)
master > end(pid:1,tid:25)
getValue(pid:1,tid:25)
master> addKeyValue(pid:Create thread :(pid:1,tid:25)
1,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:Create thread :(pid:2,tid:25)
2,tid:25)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
ClientThread> start(pid:1,tid:25)
master > end(pid:1,tid:25)
getValue(pid:1,tid:25)
master> addKeyValue(pid:Create thread :(pid:1,tid:22)
1,tid:22)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:Create thread :(pid:2,tid:22)
2,tid:22)
ClientThread> start(pid:1,tid:22)
master > end(pid:1,tid:22)
getValue(pid:1,tid:22)
*******************end Start update per generation
Tic::end used:0.06client(client(chen-5101(2)) exit.
(seconds).
chen-5101(1)) exit.end of program.

end of program.
TestF(-7.63884e-317,100)
ends successfully!
end of program.
client(chen-5101(3)) exit.
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 29
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(2) starts computing...
chen-5101(3) starts computing...
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-52.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)Create thread :(pid:2,tid:1)

##end init.
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:3,tid:5)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
ClientThread> start(pid:1,tid:3)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3ClientThread> start(pid:2,tid:1)
,tid:2)
master > end(pid:2,tid:1)
getValue(pid:ClientThread> start(pid:1,tid:0)
2,tid:1)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:2,tid:6)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
*******************Start update per generation
0:0.456845
1:0.456845
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:ClientThread> start(pid:3,tid:16)
18)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2ClientThread> start(pid:3,tid:19)
,tid:11)
master > end(pid:3,tid:19)
getValue(pid:3ClientThread> start(pid:2,tid:14)
,tid:19)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
2:8.93603e-317
refreshID=0
numTasks=10ClientThread> start(pid:1,tid:8)

numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:1,tid:8)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:ClientThread> start(pid:1,tid:23)
28)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:ClientThread> start(pid:3,tid:29)
29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.02(seconds).
TestF(-8.93603e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 30
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(2) starts computing...
chen-5101(3) starts computing...
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-53.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)Create thread :(pid:2,tid:1)

##end init.
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:3,tid:5)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:2,tid:1)
master> addKeyValue(pid:3,tid:9)
###end middle.Create thread :(pid:3,tid:9)

master > end(pid:2,tid:1)
getValue(pid:2ClientThread> start(pid:1,tid:0)
,tid:1)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)ClientThread> start(pid:1,tid:6)

master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
*******************Start update per generation
0:0.568249
1:0.568249
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10ClientThread> start(pid:1,tid:8)
)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
ClientThread> start(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:1,tid:8)
master > end(pid:2,tid:8)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
master > end(pid:2,tid:11)
ClientThread> start(pid:3,tid:12)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)ClientThread> start(pid:1,tid:13)

master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
2:6.82532e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:3,tid:19)
ClientThread> start(pid:2,tid:21)
master > end(pid:3,tid:19)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2ClientThread> start(pid:3,tid:22)
,tid:28)ClientThread> start(pid:1,tid:23)

master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.
end of program.
end used:0.032(seconds).
TestF(-6.82532e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 31
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(2)chen-5101(3) starts computing...
chen-5101(1) starts computing...
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-54.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1Create thread :(pid:1,tid:0)
,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:8)
Create thread :(pid:3,tid:8)
ClientThread> start(pid:2,tid:6)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:ClientThread> start(pid:1,tid:0)
3,tid:ClientThread> start(pid:2,tid:1)
2)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master > end(pid:2,tid:1)
getValue(pid:2ClientThread> start(pid:3,tid:8)
ClientThread> start(pid:1,tid:7)
,tid:1)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
*******************Start update per generation
0:0.712015
1:0.712015
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:16)
1,tid:16)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:ClientThread> start(pid:2,tid:11)
18)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)ClientThread> start(pid:2,tid:14)

###end middle.
master > end(pid:2,tid:14)
getValue(pid:2,tid:ClientThread> start(pid:1,tid:16)
14)
master > end(pid:1,tid:16)
getValue(pid:1,tid:16)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
2:4.69437e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:ClientThread> start(pid:3,tid:9)
1Create thread :(pid:1,tid:20)
,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:3,tid:9)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:3,tid:22)
master> addKeyValue(pid:2,tid:27)
master > end(pid:3,tid:22)
ClientThread> start(pid:1,tid:23)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
ClientThread> start(pid:3,tid:26)
1,tid:29)
###end middle.
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
Create thread :(pid:2,tid:27)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27ClientThread> start(pid:1,tid:29)
)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
ClientThread> start(pid:2,tid:27)
1,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.019(seconds).
TestF(-4.69437e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 32
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(3) starts computing...
 starts computing...chen-5101(2)Runing 
DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-55.txt starts computing...

Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2ClientThread> start(pid:1,tid:0)
,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1ClientThread> start(pid:1,tid:6)
,tid:8)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
3,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
2,tid:1)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
*******************Start update per generation
0:0.0467136
1:0.0467136
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)ClientThread> start(pid:1,tid:13)

Create thread :(pid:2,tid:18)
master> addKeyValue(pid:2ClientThread> start(pid:3,tid:12)
,tid:18)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
2:1.94997e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27ClientThread> start(pid:3,tid:22)
)
ClientThread> start(pid:1,tid:23)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:2,tid:24)
Create thread :(pid:3,tid:28)
master> addKeyValue(pid:3,tid:28)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:1,tid:29)
###end middle.
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
Create thread :(pid:1,tid:29)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.021(seconds).
TestF(-1.94997e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 33
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(2) starts computing...
chen-5101(1) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:chen-5101(3) starts computing...Run-configuration-56.txt

Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1Create thread :(pid:1,tid:0)
,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:1,tid:3)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:1,tid:7)
Create thread :(pid:1,tid:7)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:2)
3,tid:2)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:2)
3,tid:2)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
*******************Start update per generation
0:0.020307
1:0.020307
refreshID=0
numTasks=10
numSlave=3
ClientThread> start(pid:3,tid:2)
master> addKeyValue(pid:1,tid:10)Create thread :(pid:1,tid:10)

master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:3Create thread :(pid:3,tid:12)
,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:3,tid:2)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
master> addKeyValue(pid:1Create thread :(pid:1,tid:18)
,tid:18)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:15)
1,tid:15)
ClientThread> start(pid:1,tid:15)
master > end(pid:1,tid:15)
getValue(pid:1,tid:15)
master> addKeyValue(pid:Create thread :(pid:1,tid:15)
1,tid:15)
ClientThread> start(pid:1,tid:15)
master > end(pid:1,tid:15)
getValue(pid:1,tid:15)
master> addKeyValue(pid:Create thread :(pid:1,tid:15)
1,tid:15)
ClientThread> start(pid:2,tid:19)
ClientThread> start(pid:3,tid:15)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:2,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
Create thread :(pid:2,tid:15)
ClientThread> start(pid:1,tid:15)
master > end(pid:1,tid:15)
getValue(pid:1,tid:15)
master> addKeyValue(pid:Create thread :(pid:1,tid:12)
1,tid:12)
ClientThread> start(pid:1,tid:12)
master > end(pid:1,tid:12)
getValue(pid:1,tid:12)
2:1.36593e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22ClientThread> start(pid:3,tid:12)
)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:2,tid:24)
master> addKeyValue(pid:3,tid:25)
##end init.
Create thread :(pid:2,tid:24)
master > end(pid:3,tid:12)
Create thread :(pid:3,tid:25)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:1,tid:26)
Create thread :(pid:1,tid:26)
ClientThread> start(pid:2,tid:24)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2ClientThread> start(pid:1,tid:26)
,tid:27)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
master> addKeyValue(pid:1,tid:28)
Create thread :(pid:1,tid:28)
ClientThread> start(pid:3,tid:22)
Create thread :(pid:2,tid:27)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:23)
3,tid:23)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
ClientThread> start(pid:2,tid:15)
master > end(pid:2,tid:15)
ClientThread> start(pid:3,tid:23)
master > end(pid:3,tid:23)
getValue(pid:3,tid:23)
master> addKeyValue(pid:Create thread :(pid:3,tid:23)
3,tid:23)
ClientThread> start(pid:3,tid:23)
master > end(pid:3,tid:23)
getValue(pid:3,tid:23)
master> addKeyValue(pid:Create thread :(pid:3,tid:23)
3,tid:23)
ClientThread> start(pid:3,tid:23)
master > end(pid:3,tid:23)
getValue(pid:3,tid:23)
master> addKeyValue(pid:Create thread :(pid:3,tid:23)
3,tid:23)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
ClientThread> start(pid:2,tid:27)
getValue(pid:1,tid:28)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
*******************end Start update per generation
Tic::end used:0.032(seconds).
client(chen-5101(1)) exit.
client(end of program.
TestF(-1.36593e-316,100)
ends successfully!
client(chen-5101(3)) exit.
end of program.
end of program.
chen-5101(2)) exit.
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 34
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(2) starts computing... starts computing...

chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-57.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2Create thread :(pid:2,tid:1)
,tid:1)
master> addKeyValue(pid:3,tid:2)
Create thread :(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
Create thread :(pid:1,tid:3)
master> addKeyValue(pid:2,tid:Create thread :(pid:2,tid:4)
4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2ClientThread> start(pid:2,tid:6)
,tid:6)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2ClientThread> start(pid:2,tid:7)
,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2ClientThread> start(pid:2,tid:8)
,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2ClientThread> start(pid:2,tid:9)
,tid:9)
###end middle.
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:5)
1,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:3Create thread :(pid:3,tid:1)
,tid:1)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
getValue(pid:3,tid:1)
*******************Start update per generation
0:0.377461
1:0.377461
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:2Create thread :(pid:2,tid:14)
,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2ClientThread> start(pid:2,tid:1)
,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
master > end(pid:2,tid:1)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:1,tid:5)
master > end(pid:1,tid:5)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
ClientThread> start(pid:3,tid:12)
ClientThread> start(pid:2,tid:19)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12ClientThread> start(pid:1,tid:13)
)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:2,tid:17)
Create thread :(pid:2,tid:17)
ClientThread> start(pid:1,tid:10)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:3Create thread :(pid:3,tid:17)
,tid:17)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
2:1.95543e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3ClientThread> start(pid:2,tid:17)
,tid:22)
master> addKeyValue(pid:1,tid:23)
Create thread :(pid:1,tid:23)
master> addKeyValue(pid:2,tid:24)
master> addKeyValue(pid:3,tid:25)
##end init.
Create thread :(pid:2,tid:24)
master > end(pid:2,tid:17)
Create thread :(pid:3,tid:25)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:ClientThread> start(pid:3,tid:25)
20)ClientThread> start(pid:1,tid:23)

master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:26)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3Create thread :(pid:3,tid:28)
,tid:28)
ClientThread> start(pid:3,tid:22)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:3Create thread :(pid:3,tid:21)
,tid:21)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
*******************end Start update per generation
Tic::end used:0.022client(client(chen-5101(3)) exit.
(seconds).
chen-5101(1)end of program.
) exit.
client(chen-5101(2)end of program.
) exit.
end of program.
TestF(-1.95543e-316,100)
ends successfully!
end of program.
.
.
.
Test Example # 35
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(2)chen-5101(3) starts computing... starts computing...

Runing DE_for_PEC 
FunName(MyBestF,Optima)
chen-5101(1) starts computing...
Save file:Run-configuration-58.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
2,tid:1)
master> addKeyValue(pid:Create thread :(pid:3,tid:2)
3,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:3Create thread :(pid:3,tid:5)
,tid:5)
##end init.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:3,tid:8)
Create thread :(pid:3,tid:8)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:3Create thread :(pid:3,tid:3)
,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9ClientThread> start(pid:1,tid:0)
)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:1,tid:3)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2ClientThread> start(pid:1,tid:3)
,tid:1)
*******************Start update per generation
0:0.751513
1:0.751513ClientThread> start(pid:3,tid:3)

refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:3,tid:12)
master> addKeyValue(pid:1,tid:13)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:3Create thread :(pid:1,tid:10)
Create thread :(pid:2,tid:11)
,tid:15)
##end init.
master > end(pid:3,tid:3)
Create thread :(pid:1,tid:13)
Create thread :(pid:2,tid:14)
master > end(pid:1,tid:3)
ClientThread> start(pid:1,tid:10)
Create thread :(pid:3,tid:12)
ClientThread> start(pid:2,tid:14)
Create thread :(pid:3,tid:15)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:3,tid:12)
master> addKeyValue(pid:1,tid:16)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2,tid:17)
Create thread :(pid:2,tid:17)
Create thread :(pid:1,tid:16)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:ClientThread> start(pid:1,tid:16)
Create thread :(pid:3,tid:18)
3,tid:18)
master > end(pid:1,tid:16)
getValue(pid:1,tid:16)ClientThread> start(pid:3,tid:18)

master> addKeyValue(pid:1,tid:Create thread :(pid:1,tid:19)
19ClientThread> start(pid:1,tid:19)
)
###end middle.
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
ClientThread> start(pid:3,tid:15)
master> addKeyValue(pid:3,tid:17)
Create thread :(pid:3,tid:17)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:1,tid:17)
Create thread :(pid:1,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:ClientThread> start(pid:1,tid:17)
2ClientThread> start(pid:3,tid:17)
,tid:11)
2:8.19334e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:20)
master> addKeyValue(pid:2,tid:21)
master> addKeyValue(pid:3,tid:22)
Create thread :(pid:1,tid:20)
master> addKeyValue(pid:1,tid:23)
master> addKeyValue(pid:2,tid:Create thread :(pid:2,tid:21)
24)
master> addKeyValue(pid:3,tid:25)
##end init.
master > end(pid:3,tid:17)
master > end(pid:1,tid:17)
Create thread :(pid:1,tid:23)
Create thread :(pid:2,tid:24)
Create thread :(pid:3,tid:22)
Create thread :(pid:3,tid:25)
ClientThread> start(pid:1,tid:23)
ClientThread> start(pid:2,tid:24)
master > end(pid:1,tid:23)
getValue(pid:ClientThread> start(pid:3,tid:25)
1,tid:23)
master> addKeyValue(pid:1,tid:26)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2,tid:27)
Create thread :(pid:1,tid:26)
Create thread :(pid:2,tid:27)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:ClientThread> start(pid:1,tid:26)
Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:3,tid:28)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
master> addKeyValue(pid:1,tid:29)
###end middle.
Create thread :(pid:1,tid:29)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)ClientThread> start(pid:1,tid:29)

master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:ClientThread> start(pid:3,tid:21)
2ClientThread> start(pid:1,tid:20)
,tid:21)
master> addKeyValue(pid:2,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:2,tid:21)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:2,tid:21)
*******************end Start update per generation
Tic::end used:0.008(seconds).client(chen-5101(2)) exit.
client(chen-5101(3)) exit.

end of program.
end of program.
client(chen-5101(1)) exit.
end of program.
TestF(-8.19334e-317,100)
ends successfully!
end of program.
.
.
.
Test Example # 36
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2)chen-5101(3) starts computing...

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-59.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
Create thread :(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)Create thread :(pid:2,tid:1)

##end init.
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:1,tid:3)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4ClientThread> start(pid:1,tid:3)
)
master> addKeyValue(pid:2,tid:6)
Create thread :(pid:2,tid:6)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:1,tid:7)
Create thread :(pid:1,tid:7)
ClientThread> start(pid:1,tid:0)
ClientThread> start(pid:3,tid:5)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:2,tid:6)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
*******************Start update per generation
0:0.186387
1:ClientThread> start(pid:3,tid:7)
0.186387
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:3,tid:7)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
ClientThread> start(pid:3,tid:15)
ClientThread> start(pid:2,tid:11)
ClientThread> start(pid:3,tid:12)
ClientThread> start(pid:1,tid:13)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2,tid:16)
Create thread :(pid:2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3,tid:17)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3,tid:18)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:1,tid:19)
###end middle.
Create thread :(pid:1,tid:19)
Create thread :(pid:3,tid:17)
Create thread :(pid:3,tid:18)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:1,tid:19)
ClientThread> start(pid:3,tid:17)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
2:1.56567e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
ClientThread> start(pid:3,tid:16)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:3,tid:16)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:3,tid:22)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:ClientThread> start(pid:1,tid:23)
28)
master > end(pid:3,tid:22)
getValue(pid:ClientThread> start(pid:2,tid:24)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27ClientThread> start(pid:2,tid:28)
)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
master > end(pid:2,tid:28)
getValue(pid:ClientThread> start(pid:3,tid:29)
2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end of program.
end used:0.03
(seconds).
TestF(-1.56567e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 37
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...
chen-5101(3)
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-60.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2Create thread :(pid:1,tid:0)
,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:1,tid:0)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3ClientThread> start(pid:2,tid:1)
,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7ClientThread> start(pid:1,tid:8)
)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
*******************Start update per generation
0:0.7649
1:0.7649
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)Create thread :(pid:2,tid:11)

Create thread :(pid:2,tid:14)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12ClientThread> start(pid:1,tid:13)
)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:18)
18)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.ClientThread> start(pid:2,tid:11)

master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19ClientThread> start(pid:1,tid:19)
)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
2:1.23257e-316
refreshID=0
numTasks=10
numSlave=3
ClientThread> start(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:2,tid:19)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)ClientThread> start(pid:1,tid:23)

master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27ClientThread> start(pid:1,tid:28)
)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.
end of program.
end used:0.021(seconds).
TestF(-1.23257e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 38
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-61.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:ClientThread> start(pid:2,tid:4)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:ClientThread> start(pid:3,tid:5)
2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
*******************Start update per generation
ClientThread> start(pid:1,tid:2)
0:0.977709
1:0.977709
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:1,tid:2)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:12)
Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:2,tid:14)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
master > end(pid:2,tid:14)
getValue(pid:ClientThread> start(pid:3,tid:16)
2,tid:14)
master> addKeyValue(pid:2,tid:19)
###end middle.
Create thread :(pid:2,tid:19)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:1.44668e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
ClientThread> start(pid:2,tid:21)
1,tid:28)
master > end(pid:2,tid:21)
ClientThread> start(pid:3,tid:22)
getValue(pid:ClientThread> start(pid:1,tid:23)
2,tid:21)
master> addKeyValue(pid:2,tid:Create thread :(pid:2,tid:29)
29)
###end middle.
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:ClientThread> start(pid:1,tid:18)
1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
master > end(pid:1,tid:18)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end of program.

end used:0.026(seconds).
TestF(-1.44668e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 39
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...
chen-5101(3) starts computing...

Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-62.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:3,tid:5)
master > end(pid:2,tid:4)
ClientThread> start(pid:1,tid:3)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
ClientThread> start(pid:2,tid:6)
getValue(pid:1,tid:0)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
*******************Start update per generation
0:0.0401256
1:0.0401256
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:2,tid:11)
master> addKeyValue(pid:1,tid:18)Create thread :(pid:1,tid:18)

master > end(pid:2,tid:11)
getValue(pid:2,tid:ClientThread> start(pid:3,tid:12)
11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:13)
3,tid:13)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:13)
2,tid:13)
ClientThread> start(pid:3,tid:13)
master > end(pid:3,tid:13)
getValue(pid:3,tid:13)
2:8.63855e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
ClientThread> start(pid:3,tid:22)
2,tid:27)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22ClientThread> start(pid:2,tid:24)
)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:Create thread :(pid:3,tid:23)
3,tid:23)ClientThread> start(pid:2,tid:29)

master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
master> addKeyValue(pid:Create thread :(pid:2,tid:23)
2,tid:23)
Create thread :(pid:1,tid:20)
Create thread :(pid:1,tid:23)
ClientThread> start(pid:1,tid:20)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)ClientThread> start(pid:2,tid:23)

*******************end Start update per generation
Tic::end used:0.03client(client(chen-5101(3)) exit.
(seconds).
chen-5101(2)end of program.
) exit.
end of program.
TestF(-8.63855e-317,100)
ends successfully!
end of program.
ClientThread> start(pid:1,tid:13)
client(chen-5101(1)) exit.
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 40
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-63.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0Create thread :(pid:1,tid:0)
)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:1,tid:3)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
ClientThread> start(pid:2,tid:4)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)ClientThread> start(pid:2,tid:1)

master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
ClientThread> start(pid:1,tid:0)
2,tid:9)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
*******************Start update per generation
0:0.774106
1:0.774106
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
ClientThread> start(pid:3,tid:9)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:3,tid:9)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
ClientThread> start(pid:3,tid:12)
2,tid:17)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:ClientThread> start(pid:3,tid:15)
ClientThread> start(pid:2,tid:16)
18)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
2:1.94613e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:ClientThread> start(pid:2,tid:21)
20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
master > end(pid:2,tid:21)
getValue(pid:2ClientThread> start(pid:3,tid:22)
,tid:21)ClientThread> start(pid:1,tid:23)

master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:3,tid:27)
Create thread :(pid:3,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:ClientThread> start(pid:1,tid:19)
27)
master > end(pid:1,tid:19)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end of program.

end used:0.027(seconds).
TestF(-1.94613e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 41
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(2) starts computing...chen-5101(1) starts computing...

chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-64.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
Create thread :(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
Create thread :(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:3,tid:2)
3,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:3Create thread :(pid:3,tid:7)
,tid:7)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:3Create thread :(pid:3,tid:9)
,tid:9)
###end middle.
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:6)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:Create thread :(pid:2,tid:3)
2,tid:3)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:3)
3,tid:3)
ClientThread> start(pid:3,tid:3)
master > end(pid:3,tid:3)
getValue(pid:3,tid:3)
master> addKeyValue(pid:3Create thread :(pid:3,tid:3)
,tid:3)
ClientThread> start(pid:3,tid:3)
master > end(pid:3,tid:3)
getValue(pid:3,tid:3)
master> addKeyValue(pid:3Create thread :(pid:3,tid:3)
,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:3,tid:3)
master > end(pid:3,tid:3)
getValue(pid:3,tid:3)
master> addKeyValue(pid:3Create thread :(pid:3,tid:3)
,tid:3)
ClientThread> start(pid:3,tid:3)
master > end(pid:3,tid:3)
getValue(pid:3,tid:3)
master> addKeyValue(pid:Create thread :(pid:3,tid:3)
3,tid:3)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
*******************Start update per generation
0:0.191471
1:0.191471
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1Create thread :(pid:1,tid:10)
,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:3Create thread :(pid:3,tid:12)
,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
Create thread :(pid:2,tid:14)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:3Create thread :(pid:3,tid:15)
,tid:15)
##end init.
ClientThread> start(pid:2,tid:3)
master > end(pid:2,tid:3)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:16)
1,tid:16)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3Create thread :(pid:3,tid:17)
,tid:17)
ClientThread> start(pid:3,tid:3)
master > end(pid:3,tid:3)
ClientThread> start(pid:1,tid:16)
master > end(pid:1,tid:16)
getValue(pid:1,tid:16)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:3Create thread :(pid:3,tid:19)
,tid:19)
###end middle.
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)ClientThread> start(pid:3,tid:19)

master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:11)
3,tid:11)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
ClientThread> start(pid:3,tid:11)
master > end(pid:3,tid:11)
getValue(pid:3,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:11)
3,tid:11)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
2:1.20323e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
ClientThread> start(pid:3,tid:11)
master> addKeyValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
3ClientThread> start(pid:2,tid:21)
,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
2,tid:24)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:22)
3,tid:Create thread :(pid:3,tid:25)
25)
##end init.
ClientThread> start(pid:1,tid:23)
master > end(pid:3,tid:11)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:3,tid:26)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:1,tid:27)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:2,tid:28)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2,tid:29)
###end middle.
Create thread :(pid:1,tid:27)
Create thread :(pid:2,tid:24)
Create thread :(pid:2,tid:28)
ClientThread> start(pid:2,tid:24)
Create thread :(pid:2,tid:29)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
Create thread :(pid:3,tid:26)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:1,tid:26)
Create thread :(pid:1,tid:26)
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:26)
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
ClientThread> start(pid:3,tid:26)
getValue(pid:1,tid:26)
master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
ClientThread> start(pid:2,tid:28)
ClientThread> start(pid:3,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
*******************end Start update per generation
Tic::end used:0.048(seconds).
client(chen-5101(1)) exit.
end of program.
client(TestF(-1.20323e-316,100)
ends successfully!
end of program.
client(chen-5101(2)) exit.
end of program.
chen-5101(3)) exit.
end of program.
.
.
.
Test Example # 42
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(3) starts computing...
chen-5101(1) starts computing...
Runing chen-5101(2) starts computing...DE_for_PEC
 
FunName(MyBestF,Optima)
Save file:Run-configuration-65.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
2,tid:1)
master> addKeyValue(pid:3,tid:2)
Create thread :(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)Create thread :(pid:1,tid:3)

master> addKeyValue(pid:2Create thread :(pid:2,tid:4)
,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:3,tid:5)
ClientThread> start(pid:2,tid:4)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3Create thread :(pid:3,tid:6)
,tid:6)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:3Create thread :(pid:3,tid:9)
,tid:9)
###end middle.
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:1,tid:8)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
*******************Start update per generation
0:0.455475
1:0.455475
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:3Create thread :(pid:3,tid:15)
,tid:15)
##end init.
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
ClientThread> start(pid:3,tid:15)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:16)
1,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3Create thread :(pid:3,tid:17)
,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18ClientThread> start(pid:3,tid:2)
)
master > end(pid:3,tid:2)
ClientThread> start(pid:3,tid:12)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
ClientThread> start(pid:3,tid:17)
ClientThread> start(pid:1,tid:16)
master > end(pid:1,tid:16)
getValue(pid:1,tid:16)
master> addKeyValue(pid:ClientThread> start(pid:2,tid:14)
Create thread :(pid:1,tid:14)
1,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:1.13584e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2Create thread :(pid:2,tid:26)
,tid:26)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:25)
2Create thread :(pid:2,tid:28)
,tid:28)
ClientThread> start(pid:1,tid:23)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:ClientThread> start(pid:1,tid:20)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:22)
2,tid:22)
master > end(pid:1,tid:20)
getValue(pid:1,tid:ClientThread> start(pid:3,tid:22)
20)
master> addKeyValue(pid:Create thread :(pid:1,tid:22)
1,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
end of program.end of program.
end
 used:client(0.018(seconds).
chen-5101(3)) exit.
end of program.
TestF(-1.13584e-316,100)
ends successfully!
end of program.
.
.
.
Test Example # 43
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(3) starts computing...
chen-5101(1) starts computing...
Runing DE_for_PEC chen-5101(2) starts computing...

FunName(MyBestF,Optima)
Save file:Run-configuration-66.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3ClientThread> start(pid:3,tid:5)
,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
master > end(pid:3,tid:5)
ClientThread> start(pid:1,tid:6)
getValue(pid:3,tid:5)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8ClientThread> start(pid:3,tid:9)
)
master> addKeyValue(pid:Create thread :(pid:1,tid:4)
1,tid:4)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:3Create thread :(pid:3,tid:4)
,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:3Create thread :(pid:3,tid:1)
,tid:1)
ClientThread> start(pid:1,tid:4)
master > end(pid:1,tid:4)
getValue(pid:1,tid:4)
master> addKeyValue(pid:Create thread :(pid:1,tid:1)
1,tid:1)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
getValue(pid:3,tid:1)
*******************Start update per generation
0:0.200542
1:0.200542
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:ClientThread> start(pid:2,tid:1)
14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:2,tid:1)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:16)
1,tid:16)
ClientThread> start(pid:2,tid:11)
ClientThread> start(pid:3,tid:12)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:3,tid:18)
ClientThread> start(pid:1,tid:16)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
master > end(pid:1,tid:16)
getValue(pid:1,tid:16)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:15)
2Create thread :(pid:2,tid:15)
,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
2:1.87368e-316
refreshID=0
numTasks=10
numSlave=3
ClientThread> start(pid:1,tid:1)
master> addKeyValue(pid:1,tid:20)
master> addKeyValue(pid:2,tid:Create thread :(pid:2,tid:21)
Create thread :(pid:1,tid:20)
21)
master> addKeyValue(pid:3Create thread :(pid:3,tid:22)
,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:2Create thread :(pid:2,tid:24)
,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:1,tid:1)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2Create thread :(pid:2,tid:26)
,tid:26)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2ClientThread> start(pid:2,tid:21)
,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:1,tid:23)
master> addKeyValue(pid:2,tid:29)
Create thread :(pid:2,tid:29)
###end middle.
ClientThread> start(pid:2,tid:29)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29ClientThread> start(pid:3,tid:25)
)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:22)
2,tid:22)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
ClientThread> start(pid:2,tid:22)
master > end(pid:2,tid:22)
getValue(pid:2,tid:22)
master> addKeyValue(pid:Create thread :(pid:2,tid:22)
2,tid:22)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end used:0.02(seconds).
client(chen-5101(2)) exit.
end of program.
TestF(-1.87368e-316,100)
ends successfully!
end of program.


=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 44
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...
chen-5101(3)
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-67.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:3,tid:5)
ClientThread> start(pid:1,tid:0)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:3)
2,tid:3)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:Create thread :(pid:3,tid:3)
3ClientThread> start(pid:1,tid:3)
,tid:ClientThread> start(pid:1,tid:7)
3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
*******************Start update per generation
0:0.583996
1:0.583996
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:16)
ClientThread> start(pid:2,tid:14)
1,tid:16)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:1,tid:16)
master > end(pid:1,tid:16)
getValue(pid:ClientThread> start(pid:3,tid:15)
1,tid:16)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.
master > end(pid:3,tid:15)
ClientThread> start(pid:2,tid:17)
getValue(pid:3,tid:15)
master > end(pid:2,tid:17)
ClientThread> start(pid:2,tid:3)
getValue(pid:2,tid:17)
master > end(pid:2,tid:3)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
ClientThread> start(pid:3,tid:3)
master > end(pid:3,tid:3)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
2:8.35523e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:3,tid:22)
master> addKeyValue(pid:2,tid:27)
Create thread :(pid:2,tid:27)
master > end(pid:3,tid:22)
getValue(pid:3,tid:ClientThread> start(pid:1,tid:23)
22)ClientThread> start(pid:2,tid:24)

master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
###end middle.
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.
end of program.
end used:0.023(seconds).
TestF(-8.35523e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 45
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(2) starts computing...
chen-5101(3) starts computing...
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-68.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:ClientThread> start(pid:1,tid:0)
2,tid:4)
master> addKeyValue(pid:2,tid:7)
Create thread :(pid:2,tid:7)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:1,tid:8)
Create thread :(pid:1,tid:8)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:1,tid:9)
###end middle.Create thread :(pid:1,tid:9)

ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
*******************Start update per generation
0:0.842465
1:0.842465
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:1,tid:13)
ClientThread> start(pid:3,tid:12)
master > end(pid:1,tid:13)
getValue(pid:1ClientThread> start(pid:2,tid:14)
,tid:13)
master> addKeyValue(pid:1,tid:18Create thread :(pid:1,tid:18)
)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
master > end(pid:3,tid:12)
ClientThread> start(pid:3,tid:16)
getValue(pid:3,tid:12)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1ClientThread> start(pid:2,tid:19)
,tid:18)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:1.4315e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:ClientThread> start(pid:3,tid:26)
23)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:27)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::end used:client(client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
0.027(seconds).
end of program.
end of program.
chen-5101(1)) exit.
end of program.
TestF(-1.4315e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 46
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2)chen-5101(3) starts computing...

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-69.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:6)
Create thread :(pid:3,tid:6)
ClientThread> start(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:1,tid:Create thread :(pid:1,tid:8)
8)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
ClientThread> start(pid:1,tid:8)
ClientThread> start(pid:2,tid:1)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
*******************Start update per generation
0:0.194395
1:0.194395
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:1,tid:13)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)ClientThread> start(pid:3,tid:16)

master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1ClientThread> start(pid:2,tid:18)
,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
2:1.30401e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:ClientThread> start(pid:2,tid:21)
Create thread :(pid:1,tid:28)
1,tid:28)
ClientThread> start(pid:3,tid:22)
master > end(pid:2,tid:21)
getValue(pid:2,tid:ClientThread> start(pid:1,tid:23)
21)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:ClientThread> start(pid:1,tid:28)
27)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.024(seconds).
TestF(-1.30401e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 47
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...
chen-5101(3)
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-70.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:3,tid:2)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
*******************Start update per generation
0:0.167644
1:0.167644
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:6)
master > end(pid:2,tid:6)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12ClientThread> start(pid:1,tid:13)
)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:17)
17)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13ClientThread> start(pid:2,tid:14)
)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
2:1.01887e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21ClientThread> start(pid:3,tid:22)
)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:ClientThread> start(pid:1,tid:23)
28)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
master > end(pid:1,tid:23)
getValue(pid:1,tid:23ClientThread> start(pid:3,tid:26)
)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27ClientThread> start(pid:3,tid:18)
)
master > end(pid:3,tid:18)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.026(seconds).
TestF(-1.01887e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 48
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2)
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-71.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
Create thread :(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:1,tid:3)
chen-5101(3) starts computing...
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:6)
Create thread :(pid:3,tid:6)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:ClientThread> start(pid:3,tid:2)
8)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:ClientThread> start(pid:3,tid:9)
9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
*******************Start update per generation
0:0.428582
1:0.428582
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
ClientThread> start(pid:3,tid:15)
2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)ClientThread> start(pid:2,tid:11)

master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
master > end(pid:2,tid:11)
ClientThread> start(pid:3,tid:12)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)ClientThread> start(pid:2,tid:16)

master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:13)
3,tid:13)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13ClientThread> start(pid:2,tid:19)
)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:4.09536e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:3Create thread :(pid:3,tid:22)
,tid:22)
master> addKeyValue(pid:ClientThread> start(pid:1,tid:9)
1,tid:23)
Create thread :(pid:2,tid:24)
master> addKeyValue(pid:2,tid:24)
Create thread :(pid:1,tid:23)
master> addKeyValue(pid:3,tid:25)Create thread :(pid:3,tid:25)

##end init.
master > end(pid:1,tid:9)
ClientThread> start(pid:3,tid:13)
master > end(pid:3,tid:13)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
ClientThread> start(pid:1,tid:20)
ClientThread> start(pid:2,tid:21)
ClientThread> start(pid:2,tid:24)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:1,tid:26)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:2,tid:27)
Create thread :(pid:1,tid:26)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:28)
Create thread :(pid:2,tid:28)
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
master> addKeyValue(pid:1,tid:29)
###end middle.
Create thread :(pid:1,tid:29)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
ClientThread> start(pid:1,tid:23)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:27)
27)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
ClientThread> start(pid:2,tid:27)
1,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
*******************end Start update per generation
Tic::end used:0.018(seconds).client(client(chen-5101(2)) exit.
client(chen-5101(3)) exit.

end of program.
chen-5101(1)) exit.
TestF(-4.09536e-317,100)
ends successfully!
end of program.
end of program.
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 49
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...chen-5101(3)

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-72.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:ClientThread> start(pid:1,tid:3)
5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2ClientThread> start(pid:3,tid:2)
,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.ClientThread> start(pid:3,tid:6)

master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
*******************Start update per generation
0:0.65273
1:0.65273
refreshID=0
numTasks=ClientThread> start(pid:3,tid:7)
10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:3,tid:7)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:ClientThread> start(pid:2,tid:14)
18)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:ClientThread> start(pid:1,tid:17)
2,tid:11)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:ClientThread> start(pid:1,tid:18)
ClientThread> start(pid:2,tid:18)
3,tid:18)
2:5.5342e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:20)
master> addKeyValue(pid:2,tid:21)
master> addKeyValue(pid:3,tid:22)
master> addKeyValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:24)
master> addKeyValue(pid:3,tid:25)
##end init.
Create thread :(pid:3,tid:22)
master > end(pid:1,tid:18)
master > end(pid:2,tid:18)
Create thread :(pid:2,tid:24)
Create thread :(pid:3,tid:25)
Create thread :(pid:1,tid:20)
Create thread :(pid:1,tid:23)
ClientThread> start(pid:1,tid:23)
ClientThread> start(pid:3,tid:25)
ClientThread> start(pid:2,tid:24)
ClientThread> start(pid:1,tid:20)
ClientThread> start(pid:3,tid:22)
ClientThread> start(pid:2,tid:21)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3,tid:26)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:1,tid:27)
Create thread :(pid:3,tid:26)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:1,tid:28)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:3,tid:29)
###end middle.
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
Create thread :(pid:3,tid:29)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:2,tid:27)
Create thread :(pid:2,tid:27)
Create thread :(pid:1,tid:27)
Create thread :(pid:1,tid:28)
ClientThread> start(pid:3,tid:29)
ClientThread> start(pid:2,tid:27)
ClientThread> start(pid:1,tid:28)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:2,tid:26)
Create thread :(pid:2,tid:26)
ClientThread> start(pid:3,tid:26)
ClientThread> start(pid:1,tid:27)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
*******************end Start update per generation
Tic::end used:0.062client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
(seconds).
end of program.end of program.

TestF(-5.5342e-317,100)
ends successfully!
end of program.
client(chen-5101(3)) exit.
end of program.
.
.
.
Test Example # 50
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(3) starts computing...
 starts computing...
Runing chen-5101(2) starts computing...
DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-73.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
2Create thread :(pid:2,tid:1)
,tid:1)
master> addKeyValue(pid:3Create thread :(pid:3,tid:2)
,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3Create thread :(pid:2,tid:4)
,tid:5)
##end init.
Create thread :(pid:1,tid:3)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:1,tid:3)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:2Create thread :(pid:2,tid:6)
,tid:6)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
ClientThread> start(pid:2,tid:6)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:5)
1,tid:5)ClientThread> start(pid:2,tid:5)

master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2,tid:2)
Create thread :(pid:2,tid:2)
ClientThread> start(pid:1,tid:5)
master > end(pid:1,tid:5)
getValue(pid:1,tid:5)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
*******************Start update per generation
0:0.174516
1:0.174516
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:2Create thread :(pid:2,tid:11)
,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:3Create thread :(pid:3,tid:15)
,tid:15)
##end init.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3Create thread :(pid:3,tid:16)
,tid:16)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2Create thread :(pid:2,tid:18)
,tid:18)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)ClientThread> start(pid:1,tid:2)

###end middle.
master > end(pid:1,tid:2)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18ClientThread> start(pid:2,tid:14)
)
ClientThread> start(pid:1,tid:17)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2Create thread :(pid:2,tid:16)
,tid:16)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
master> addKeyValue(pid:Create thread :(pid:1,tid:16)
1,tid:16)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
2:1.48371e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:ClientThread> start(pid:3,tid:25)
28)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
ClientThread> start(pid:1,tid:23)
master> addKeyValue(pid:3,tid:29)
###end middle.Create thread :(pid:3,tid:29)

master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
ClientThread> start(pid:1,tid:16)
master > end(pid:1,tid:16)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:22)
1,tid:22)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:22)
2,tid:22)
ClientThread> start(pid:2,tid:22)
master > end(pid:2,tid:22)
getValue(pid:2,tid:22)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
end of program.end of program.
end used:
client(chen-5101(3)) exit.
0.02(seconds).
end of program.
TestF(-1.48371e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 51
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2)
chen-5101(3) starts computing...
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-74.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
Create thread :(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
3,tid:2)Create thread :(pid:3,tid:2)

master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:2Create thread :(pid:2,tid:4)
,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:ClientThread> start(pid:1,tid:0)
2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:1,tid:8)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:1,tid:9)
###end middle.
Create thread :(pid:1,tid:8)
Create thread :(pid:1,tid:9)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3Create thread :(pid:3,tid:4)
,tid:4)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:4)
1,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
*******************Start update per generation
0:0.581542
1:0.581542
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:2,tid:14)
Create thread :(pid:2,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
Create thread :(pid:3,tid:15)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2Create thread :(pid:2,tid:18)
,tid:18)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:ClientThread> start(pid:2,tid:14)
19)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
master> addKeyValue(pid:Create thread :(pid:1,tid:16)
1,tid:16)ClientThread> start(pid:3,tid:16)

master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
2:1.37221e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:2,tid:21)
Create thread :(pid:2,tid:21)
master> addKeyValue(pid:3,tid:22)
Create thread :(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:3Create thread :(pid:3,tid:28)
,tid:28)
ClientThread> start(pid:1,tid:4)
ClientThread> start(pid:3,tid:28)
master > end(pid:1,tid:4)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3ClientThread> start(pid:3,tid:29)
,tid:29)
###end middle.
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:21)
3,tid:21)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
ClientThread> start(pid:1,tid:16)
master > end(pid:1,tid:16)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:21)
3,tid:21)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)ClientThread> start(pid:2,tid:21)

*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end used:
0.019(seconds).
client(chen-5101(2)) exit.
end of program.
TestF(-1.37221e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 52
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...chen-5101(3)
 starts computing...

Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-75.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3Create thread :(pid:2,tid:1)
,tid:2)
master> addKeyValue(pid:1,tid:3)Create thread :(pid:3,tid:2)

Create thread :(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)ClientThread> start(pid:3,tid:2)

master> addKeyValue(pid:2,tid:Create thread :(pid:2,tid:8)
8)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
ClientThread> start(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master > end(pid:2,tid:8)
ClientThread> start(pid:3,tid:9)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
*******************Start update per generation
0:0.795044
1:0.795044
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10ClientThread> start(pid:2,tid:11)
)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
master > end(pid:2,tid:11)
getValue(pid:2ClientThread> start(pid:3,tid:12)
,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:ClientThread> start(pid:1,tid:13)
19)
###end middle.
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1ClientThread> start(pid:2,tid:19)
,tid:17)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:1.81175e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:ClientThread> start(pid:1,tid:8)
23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3ClientThread> start(pid:2,tid:9)
,tid:25)
##end init.
master > end(pid:2,tid:9)
master > end(pid:1,tid:8)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)ClientThread> start(pid:2,tid:24)

master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:ClientThread> start(pid:3,tid:25)
26)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
###end middle.
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:26)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.018(seconds).
TestF(-1.81175e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 53
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-76.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
chen-5101(3) starts computing...
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:2,tid:6)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:2,tid:7)
Create thread :(pid:2,tid:6)
Create thread :(pid:2,tid:7)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:8)
Create thread :(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:3,tid:9)
###end middle.
ClientThread> start(pid:3,tid:8)
Create thread :(pid:3,tid:9)
ClientThread> start(pid:3,tid:9)
ClientThread> start(pid:1,tid:0)
ClientThread> start(pid:2,tid:7)
ClientThread> start(pid:2,tid:6)
ClientThread> start(pid:1,tid:3)
ClientThread> start(pid:3,tid:2)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:2,tid:9)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:1,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
*******************Start update per generation
0:0.207482
1:0.207482
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:3,tid:12)
master> addKeyValue(pid:1,tid:13)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
Create thread :(pid:3,tid:12)
Create thread :(pid:3,tid:15)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3,tid:16)
Create thread :(pid:3,tid:16)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:3,tid:17)
Create thread :(pid:3,tid:17)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:3,tid:18)
Create thread :(pid:3,tid:18)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
master> addKeyValue(pid:3,tid:19)
###end middle.
Create thread :(pid:3,tid:19)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
Create thread :(pid:1,tid:9)
Create thread :(pid:1,tid:10)
Create thread :(pid:1,tid:13)
Create thread :(pid:2,tid:9)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
Create thread :(pid:2,tid:11)
getValue(pid:1,tid:13)
Create thread :(pid:2,tid:14)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2,tid:15)
Create thread :(pid:2,tid:15)
ClientThread> start(pid:2,tid:15)
master > end(pid:2,tid:15)
getValue(pid:2,tid:15)
master> addKeyValue(pid:2,tid:15)
Create thread :(pid:2,tid:15)
ClientThread> start(pid:2,tid:15)
master > end(pid:2,tid:15)
getValue(pid:2,tid:15)
master> addKeyValue(pid:2,tid:15)
ClientThread> start(pid:1,tid:10)
Create thread :(pid:2,tid:15)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
2:ClientThread> start(pid:2,tid:15)
5.39254e-317
refreshID=0
numTasks=10
ClientThread> start(pid:1,tid:9)
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:15)
2Create thread :(pid:2,tid:21)
,tid:21)
master> addKeyValue(pid:ClientThread> start(pid:2,tid:21)
3,tid:22)
master> addKeyValue(pid:1,tid:23)
master> addKeyValue(pid:2,tid:24)
master> addKeyValue(pid:3,tid:25)
##end init.
master > end(pid:1,tid:9)
master > end(pid:2,tid:15)
master > end(pid:3,tid:15)
Create thread :(pid:1,tid:23)
Create thread :(pid:3,tid:22)
Create thread :(pid:2,tid:24)
Create thread :(pid:3,tid:25)
ClientThread> start(pid:3,tid:22)
master > end(pid:2,tid:21)
ClientThread> start(pid:1,tid:23)
getValue(pid:2,tid:21)
master> addKeyValue(pid:2Create thread :(pid:2,tid:26)
,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:3,tid:27)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:1,tid:28)
Create thread :(pid:1,tid:28)
Create thread :(pid:3,tid:27)
master > end(pid:2,tid:24)
ClientThread> start(pid:1,tid:28)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2,tid:29)
###end middle.
Create thread :(pid:2,tid:29)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:ClientThread> start(pid:2,tid:25)
3,tid:ClientThread> start(pid:1,tid:20)
25)
master> addKeyValue(pid:3,tid:25)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
*******************end Start update per generation
Tic::end used:0.009(seconds).
client(chen-5101(2)) exit.
end of program.
TestF(-5.39254e-317,100)
ends successfully!
end of program.
client(chen-5101(1)) exit.
end of program.
Create thread :(pid:3,tid:25)
client(chen-5101(3)) exit.
ClientThread> start(pid:3,tid:25)

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 54
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(2)chen-5101(3) starts computing...
chen-5101(1) starts computing...
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-77.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:Create thread :(pid:2,tid:1)
5)
##end init.
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:3,tid:2)
ClientThread> start(pid:1,tid:0)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:3,tid:7)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:1,tid:8)
Create thread :(pid:3,tid:7)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:1,tid:9)
###end middle.
Create thread :(pid:1,tid:8)
Create thread :(pid:1,tid:9)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:1,tid:5)
Create thread :(pid:1,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:4)
Create thread :(pid:3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
*******************Start update per generation
0:0.461119
1:0.461119
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:3,tid:12)Create thread :(pid:1,tid:10)

master> addKeyValue(pid:1,tid:13)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
Create thread :(pid:1,tid:13)
Create thread :(pid:3,tid:12)
Create thread :(pid:2,tid:11)
Create thread :(pid:3,tid:15)
Create thread :(pid:2,tid:14)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2,tid:16)
Create thread :(pid:2,tid:16)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:1,tid:13)
master > end(pid:2,tid:4)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1ClientThread> start(pid:3,tid:12)
,tid:17)
master > end(pid:3,tid:12)
getValue(pid:ClientThread> start(pid:2,tid:11)
3,tid:12)
master> addKeyValue(pid:3,tid:18)
Create thread :(pid:3,tid:18)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2,tid:19)
###end middle.
Create thread :(pid:2,tid:19)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
master> addKeyValue(pid:Create thread :(pid:1,tid:15)
1,tid:15)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:2,tid:15)
Create thread :(pid:2,tid:15)
ClientThread> start(pid:1,tid:5)
master > end(pid:1,tid:5)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
2:7.31303e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:3,tid:25)
##end init.
Create thread :(pid:3,tid:22)
Create thread :(pid:3,tid:25)
ClientThread> start(pid:1,tid:15)
master > end(pid:1,tid:15)
ClientThread> start(pid:2,tid:15)
master > end(pid:2,tid:15)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:1,tid:26)
Create thread :(pid:1,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:1,tid:28)
Create thread :(pid:1,tid:28)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)ClientThread> start(pid:1,tid:26)

###end middle.
master > end(pid:1,tid:26)
getValue(pid:1ClientThread> start(pid:2,tid:27)
,tid:26)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:1,tid:22)
Create thread :(pid:1,tid:22)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
*******************end Start update per generation
Tic::end used:0.027(seconds).client(chen-5101(1)) exit.
client(
end of program.
chen-5101(2)TestF(-7.31303e-317,100)
) exit.
ends successfully!
end of program.
end of program.
client(chen-5101(3)) exit.
end of program.
.
.
.
Test Example # 55
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC chen-5101(2) starts computing...

FunName(MyBestF,Optima)
Save file:Run-configuration-78.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:Create thread :(pid:2,tid:1)
1)Create thread :(pid:1,tid:0)

master> addKeyValue(pid:Create thread :(pid:3,tid:2)
3,tid:2)
master> addKeyValue(pid:1,tid:3)
Create thread :(pid:1,tid:3)
master> addKeyValue(pid:2,tid:Create thread :(pid:2,tid:4)
4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3Create thread :(pid:3,tid:6)
,tid:6)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:3Create thread :(pid:3,tid:7)
,tid:7)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:ClientThread> start(pid:3,tid:7)
8)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:3Create thread :(pid:3,tid:9)
,tid:9)
###end middle.
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
ClientThread> start(pid:2,tid:1)
ClientThread> start(pid:1,tid:8)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
*******************Start update per generation
0:0.374174
1:0.374174
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:ClientThread> start(pid:2,tid:2)
13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:2,tid:2)
ClientThread> start(pid:3,tid:2)
ClientThread> start(pid:2,tid:11)
master > end(pid:3,tid:2)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:2,tid:14)
master> addKeyValue(pid:1,tid:17)
master > end(pid:2,tid:14)
Create thread :(pid:1,tid:17)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2,tid:18)
Create thread :(pid:2,tid:18)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3Create thread :(pid:3,tid:19)
,tid:19)
###end middle.
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:2,tid:18)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
ClientThread> start(pid:3,tid:15)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
2:1.14495e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:2Create thread :(pid:2,tid:24)
,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
ClientThread> start(pid:1,tid:23)
3,tid:26)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:2Create thread :(pid:2,tid:29)
,tid:29)
###end middle.
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3ClientThread> start(pid:1,tid:20)
,tid:26)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:22)
2,tid:22)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:Create thread :(pid:1,tid:22)
1,tid:ClientThread> start(pid:2,tid:22)
22)
master > end(pid:2,tid:22)
getValue(pid:2,tid:22)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.
endclient(chen-5101(2)) exit.
 used:end of program.
0.021(seconds).
TestF(-1.14495e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 56
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...
chen-5101(3)
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-79.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)ClientThread> start(pid:3,tid:2)

master> addKeyValue(pid:2,tid:8)
Create thread :(pid:2,tid:8)
master > end(pid:3,tid:2)
getValue(pid:3,tid:ClientThread> start(pid:2,tid:6)
2)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:3)
2,tid:3)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:ClientThread> start(pid:1,tid:3)
1,tid:0)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
*******************Start update per generation
0:0.940946
1:0.940946
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:3)
master > end(pid:2,tid:3)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)ClientThread> start(pid:1,tid:9)

master > end(pid:1,tid:9)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
ClientThread> start(pid:1,tid:13)
getValue(pid:3,tid:12ClientThread> start(pid:2,tid:14)
)
master> addKeyValue(pid:3,tid:18)Create thread :(pid:3,tid:18)

master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:ClientThread> start(pid:1,tid:19)
19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
2:1.50395e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
ClientThread> start(pid:3,tid:22)
2ClientThread> start(pid:1,tid:23)
,tid:28)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.029(seconds).
TestF(-1.50395e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 57
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...chen-5101(3)

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-80.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1Create thread :(pid:1,tid:0)
,tid:0)
master> addKeyValue(pid:2Create thread :(pid:2,tid:1)
,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:Create thread :(pid:3,tid:2)
3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:ClientThread> start(pid:3,tid:2)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:4)
1ClientThread> start(pid:3,tid:8)
,tid:4)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:1,tid:4)
master > end(pid:1,tid:4)
getValue(pid:1,tid:4)
master> addKeyValue(pid:Create thread :(pid:1,tid:4)
1,tid:4)ClientThread> start(pid:3,tid:4)

master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
3,tid:1)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
*******************Start update per generation
0:0.0136485
1:0.0136485
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:ClientThread> start(pid:3,tid:12)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
ClientThread> start(pid:2,tid:14)
1,tid:18)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:3,tid:16)
ClientThread> start(pid:2,tid:11)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
ClientThread> start(pid:1,tid:4)
master > end(pid:1,tid:4)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:1.12451e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1ClientThread> start(pid:3,tid:22)
,tid:23)
ClientThread> start(pid:2,tid:24)
master> addKeyValue(pid:1Create thread :(pid:1,tid:28)
,tid:28)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.028(seconds).
TestF(-1.12451e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 58
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...chen-5101(3)

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-81.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:3,tid:5)
ClientThread> start(pid:1,tid:0)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
master > end(pid:1,tid:0)
getValue(pid:1ClientThread> start(pid:1,tid:6)
,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:ClientThread> start(pid:3,tid:2)
2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:2)
3,tid:2)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
*******************Start update per generation
0:0.212486
1:0.212486
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
Create thread :(pid:3,tid:15)
master> addKeyValue(pid:3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
ClientThread> start(pid:1,tid:13)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:ClientThread> start(pid:2,tid:18)
18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
2:1.35177e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:2,tid:21)
master> addKeyValue(pid:1,tid:28)
Create thread :(pid:1,tid:28)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:2,tid:29)
###end middle.
Create thread :(pid:2,tid:29)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:1,tid:23)
ClientThread> start(pid:2,tid:27)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:26)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.023(seconds).
TestF(-1.35177e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 59
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-82.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5ClientThread> start(pid:1,tid:3)
)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:ClientThread> start(pid:2,tid:8)
3,tid:2)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
*******************Start update per generation
0:0.320769
1:0.320769
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14ClientThread> start(pid:3,tid:15)
)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:1,tid:18)
ClientThread> start(pid:2,tid:11)
Create thread :(pid:1,tid:18)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3,tid:19)
###end middle.
Create thread :(pid:3,tid:19)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:ClientThread> start(pid:3,tid:17)
16)
master> addKeyValue(pid:2ClientThread> start(pid:1,tid:6)
ClientThread> start(pid:3,tid:9)
,tid:13)
Create thread :(pid:2,tid:13)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master > end(pid:3,tid:9)
master > end(pid:1,tid:6)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:Create thread :(pid:3,tid:13)
3,tid:13)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
2:1.11378e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
ClientThread> start(pid:3,tid:26)
1,tid:29)
###end middle.
master > end(pid:3,tid:26)
getValue(pid:3,tid:26ClientThread> start(pid:3,tid:22)
)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:3,tid:13)
master > end(pid:3,tid:13)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
ClientThread> start(pid:2,tid:28)
getValue(pid:1,tid:20)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end of program.

end used:0.022(seconds).
TestF(-1.11378e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 60
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(3) starts computing...
Runing chen-5101(2) starts computing...
DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-83.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:3,tid:2)
Create thread :(pid:1,tid:3)
Create thread :(pid:3,tid:5)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:3,tid:6)
ClientThread> start(pid:2,tid:1)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
*******************Start update per generation
0:0.774172
1:0.774172
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:2,tid:11)
ClientThread> start(pid:3,tid:12)
ClientThread> start(pid:1,tid:2)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
master > end(pid:1,tid:2)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:1,tid:17)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:2Create thread :(pid:2,tid:16)
,tid:16)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
master> addKeyValue(pid:1,tid:16)Create thread :(pid:1,tid:16)

ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
2:1.88299e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:ClientThread> start(pid:2,tid:16)
25)
##end init.
master > end(pid:2,tid:16)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:ClientThread> start(pid:1,tid:23)
3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:ClientThread> start(pid:1,tid:16)
27)
master > end(pid:1,tid:16)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:3Create thread :(pid:3,tid:29)
,tid:29)
###end middle.
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3ClientThread> start(pid:2,tid:24)
ClientThread> start(pid:1,tid:27)
,tid:29)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:21)
3,tid:21)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
*******************end Start update per generation
Tic::end used:0.022client(client(chen-5101(3)) exit.
(seconds).
chen-5101(1)end of program.
) exit.
client(chen-5101(2)) exit.
end of program.end of program.

TestF(-1.88299e-316,100)
ends successfully!
end of program.
.
.
.
Test Example # 61
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2)
chen-5101(3) starts computing...
Runing  starts computing...
DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-84.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2Create thread :(pid:2,tid:1)
,tid:1)
master> addKeyValue(pid:3Create thread :(pid:3,tid:2)
,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:3Create thread :(pid:3,tid:6)
,tid:6)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:4)
1,tid:4)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:3Create thread :(pid:3,tid:4)
,tid:4)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
3,tid:1)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
getValue(pid:3,tid:1)
*******************Start update per generation
0:0.743258
1:0.743258
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:2Create thread :(pid:2,tid:11)
,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
ClientThread> start(pid:2,tid:1)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:2,tid:1)
ClientThread> start(pid:1,tid:4)
master > end(pid:1,tid:4)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2Create thread :(pid:2,tid:16)
,tid:16)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2Create thread :(pid:2,tid:17)
,tid:17)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:ClientThread> start(pid:2,tid:18)
1,tid:13)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:19)
19)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
2:1.74861e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:2,tid:21)
master> addKeyValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
3,tid:25)
##end init.Create thread :(pid:3,tid:22)

Create thread :(pid:3,tid:25)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:3,tid:26)
Create thread :(pid:3,tid:26)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3ClientThread> start(pid:3,tid:27)
,tid:26)
master> addKeyValue(pid:ClientThread> start(pid:2,tid:24)
Create thread :(pid:3,tid:28)
3,tid:28)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:1,tid:23)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23ClientThread> start(pid:3,tid:29)
)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
master> addKeyValue(pid:Create thread :(pid:3,tid:21)
3,tid:21)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end used:
client(chen-5101(2)) exit.
0.02(seconds).
end of program.
TestF(-1.74861e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 62
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(2) starts computing...
 starts computing...
Runing chen-5101(3) starts computing...
DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-85.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:ClientThread> start(pid:1,tid:0)
3,tid:5)
master> addKeyValue(pid:3Create thread :(pid:3,tid:7)
,tid:7)
master > end(pid:1,tid:0)
ClientThread> start(pid:1,tid:6)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:3Create thread :(pid:3,tid:9)
,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:3Create thread :(pid:3,tid:4)
,tid:4)
ClientThread> start(pid:3,tid:4)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:4)
1,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:3Create thread :(pid:3,tid:4)
,tid:4)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:3Create thread :(pid:3,tid:1)
,tid:1)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
getValue(pid:3,tid:1)
*******************Start update per generation
0:0.128502
1:0.128502
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)ClientThread> start(pid:2,tid:1)

master> addKeyValue(pid:2,tid:14)
Create thread :(pid:2,tid:14)
master> addKeyValue(pid:3,tid:15)Create thread :(pid:3,tid:15)

ClientThread> start(pid:3,tid:15)
##end init.
master > end(pid:2,tid:1)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3Create thread :(pid:3,tid:16)
,tid:16)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:3,tid:12)
ClientThread> start(pid:1,tid:4)
master > end(pid:1,tid:4)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:ClientThread> start(pid:2,tid:14)
3,tid:17)
master> addKeyValue(pid:3,tid:19)
###end middle.
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
Create thread :(pid:3,tid:19)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)ClientThread> start(pid:2,tid:11)

master> addKeyValue(pid:Create thread :(pid:3,tid:11)
3,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
2:7.06816e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:2Create thread :(pid:2,tid:21)
,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:26)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:3Create thread :(pid:3,tid:29)
,tid:ClientThread> start(pid:3,tid:29)
29)ClientThread> start(pid:3,tid:25)

###end middle.
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3,tid:26)
Create thread :(pid:3,tid:26)
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:24)
3,tid:24)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:24)
1,tid:24)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
*******************end Start update per generation
Tic::end used:0.022client(client(chen-5101(3)) exit.
(seconds).
chen-5101(1)end of program.
) exit.
client(chen-5101(2)) exit.
end of program.
end of program.
TestF(-7.06816e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 63
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...
chen-5101(3)
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-86.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1Create thread :(pid:1,tid:0)
,tid:0)
master> addKeyValue(pid:2Create thread :(pid:2,tid:1)
,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1Create thread :(pid:1,tid:3)
,tid:3Create thread :(pid:3,tid:2)
)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:3,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:6)
Create thread :(pid:3,tid:6)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
*******************Start update per generation
0:0.54786
1:0.54786
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)ClientThread> start(pid:1,tid:13)

master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.
master > end(pid:1,tid:10)
getValue(pid:1,tid:10ClientThread> start(pid:3,tid:12)
)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
2:5.96525e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
ClientThread> start(pid:3,tid:25)
2,tid:26)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)ClientThread> start(pid:1,tid:23)

master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
###end middle.
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)ClientThread> start(pid:1,tid:29)

master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
end of program.end of program.

end used:0.025(seconds).
client(chen-5101(3)) exit.
end of program.
TestF(-5.96525e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 64
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-87.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:3,tid:5)
ClientThread> start(pid:1,tid:3)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3ClientThread> start(pid:2,tid:1)
,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)ClientThread> start(pid:3,tid:6)

master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9ClientThread> start(pid:2,tid:8)
)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
*******************Start update per generation
0:0.414722
1:0.414722
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
ClientThread> start(pid:3,tid:15)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:ClientThread> start(pid:2,tid:11)
10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
master > end(pid:2,tid:11)
ClientThread> start(pid:3,tid:12)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:13)
3,tid:13)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
ClientThread> start(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:1.44385e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)ClientThread> start(pid:3,tid:22)

master > end(pid:2,tid:21)
getValue(pid:2ClientThread> start(pid:1,tid:23)
,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)ClientThread> start(pid:3,tid:13)

###end middle.
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master > end(pid:3,tid:13)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)ClientThread> start(pid:3,tid:26)

master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27ClientThread> start(pid:1,tid:28)
)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.
end of program.
end used:0.024(seconds).
TestF(-1.44385e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 65
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-88.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
*******************Start update per generation
0:0.982016
1:0.982016
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15ClientThread> start(pid:2,tid:8)
)
##end init.
master > end(pid:2,tid:8)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
ClientThread> start(pid:1,tid:9)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
master > end(pid:1,tid:9)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1ClientThread> start(pid:2,tid:11)
,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)ClientThread> start(pid:1,tid:13)

ClientThread> start(pid:3,tid:12)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master > end(pid:3,tid:12)
ClientThread> start(pid:3,tid:16)
getValue(pid:3,tid:12)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
ClientThread> start(pid:2,tid:17)
getValue(pid:1,tid:18)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
2:1.43757e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:2Create thread :(pid:2,tid:21)
,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:ClientThread> start(pid:2,tid:21)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
ClientThread> start(pid:3,tid:22)
1,tid:28)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:ClientThread> start(pid:2,tid:29)
27)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.027(seconds).
TestF(-1.43757e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 66
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...
chen-5101(3)
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-89.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
Create thread :(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
Create thread :(pid:3,tid:2)
master> addKeyValue(pid:1Create thread :(pid:1,tid:3)
,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1ClientThread> start(pid:1,tid:0)
,tid:3)
master > end(pid:1,tid:0)
getValue(pid:1ClientThread> start(pid:2,tid:1)
,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1ClientThread> start(pid:3,tid:7)
,tid:8)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master > end(pid:3,tid:7)
getValue(pid:ClientThread> start(pid:2,tid:8)
3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
*******************Start update per generation
0:0.377092
1:0.377092
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14ClientThread> start(pid:3,tid:15)
)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:ClientThread> start(pid:2,tid:11)
18)
ClientThread> start(pid:3,tid:12)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
master > end(pid:3,tid:12)
ClientThread> start(pid:2,tid:16)
ClientThread> start(pid:3,tid:17)
getValue(pid:3,tid:12)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:13)
3,tid:13)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:1.67961e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:3,tid:25)
##end init.
Create thread :(pid:3,tid:25)
ClientThread> start(pid:3,tid:13)
master > end(pid:3,tid:13)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21ClientThread> start(pid:1,tid:23)
)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)ClientThread> start(pid:2,tid:26)

master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
###end middle.
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end of program.

end used:0.024(seconds).
TestF(-1.67961e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 67
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-90.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:3,tid:6)
ClientThread> start(pid:3,tid:2)
Create thread :(pid:3,tid:6)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:7)
Create thread :(pid:3,tid:7)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3ClientThread> start(pid:2,tid:4)
,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:Create thread :(pid:3,tid:3)
3,tid:3)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:ClientThread> start(pid:2,tid:1)
0)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:Create thread :(pid:2,tid:3)
2,tid:3)
ClientThread> start(pid:3,tid:3)
master > end(pid:3,tid:3)
getValue(pid:3,tid:3)
*******************Start update per generation
0:0.418373
1:0.418373
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14ClientThread> start(pid:1,tid:3)
ClientThread> start(pid:3,tid:15)
)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
master > end(pid:1,tid:3)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:ClientThread> start(pid:2,tid:11)
10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:3,tid:12)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
master > end(pid:3,tid:12)
getValue(pid:ClientThread> start(pid:2,tid:16)
3,tid:12)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:13)
3,tid:13)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13ClientThread> start(pid:1,tid:18)
)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
ClientThread> start(pid:2,tid:3)
master > end(pid:2,tid:3)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:1.56587e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)ClientThread> start(pid:3,tid:13)

master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:3,tid:13)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
ClientThread> start(pid:2,tid:21)
1,tid:ClientThread> start(pid:3,tid:22)
27)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:3,tid:25)
master> addKeyValue(pid:3,tid:29)
###end middle.Create thread :(pid:3,tid:29)

master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
*******************end Start update per generation
Tic::end used:0.022client(chen-5101(1)) exit.
client(client(chen-5101(3)) exit.
(seconds).
end of program.
end of program.
chen-5101(2)) exit.
end of program.
TestF(-1.56587e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 68
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(2) starts computing...
 starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-91.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2Create thread :(pid:2,tid:1)
,tid:1)
master> addKeyValue(pid:3,tid:2Create thread :(pid:3,tid:2)
)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2ClientThread> start(pid:3,tid:7)
,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:5)
1,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3Create thread :(pid:3,tid:4)
,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
*******************Start update per generation
0:0.137879
1:0.137879
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:3,tid:12)
Create thread :(pid:3,tid:12)
master> addKeyValue(pid:1,tid:13)
Create thread :(pid:1,tid:13)
master> addKeyValue(pid:2Create thread :(pid:2,tid:14)
,tid:14)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:15)
15)
##end init.
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:1,tid:5)
master > end(pid:1,tid:5)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)ClientThread> start(pid:2,tid:14)

master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2Create thread :(pid:2,tid:16)
,tid:16)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:3,tid:16)
Create thread :(pid:3,tid:16)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
2:1.12086e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:2Create thread :(pid:2,tid:21)
,tid:ClientThread> start(pid:2,tid:16)
21)
master> addKeyValue(pid:3Create thread :(pid:3,tid:22)
,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:2,tid:16)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:ClientThread> start(pid:3,tid:26)
28)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
ClientThread> start(pid:3,tid:16)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master > end(pid:3,tid:16)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1ClientThread> start(pid:3,tid:25)
,tid:27)
master> addKeyValue(pid:Create thread :(pid:1,tid:25)
1,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:21)
3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
end of program.end of program.
end used:
client(chen-5101(3)) exit.
0.022(seconds).
end of program.
TestF(-1.12086e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 69
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(2) starts computing...chen-5101(3)
 starts computing...
Runing chen-5101(1) starts computing...
DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-92.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
2,tid:1)
master> addKeyValue(pid:3,tid:2Create thread :(pid:3,tid:2)
)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)ClientThread> start(pid:2,tid:1)

master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
getValue(pid:1,tid:2)
*******************Start update per generation
0:0.0156825
1:0.0156825
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1Create thread :(pid:1,tid:10)
,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:3Create thread :(pid:3,tid:12)
,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:3Create thread :(pid:3,tid:15)
,tid:15)
##end init.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:1Create thread :(pid:1,tid:17)
,tid:17)
ClientThread> start(pid:3,tid:12)
ClientThread> start(pid:1,tid:13)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:ClientThread> start(pid:2,tid:16)
3,tid:18)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3Create thread :(pid:3,tid:19)
,tid:19)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
ClientThread> start(pid:1,tid:17)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
2:1.88521e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:2Create thread :(pid:2,tid:21)
,tid:21)
master> addKeyValue(pid:3Create thread :(pid:3,tid:22)
,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:26)
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:ClientThread> start(pid:2,tid:24)
28)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
###end middle.
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:ClientThread> start(pid:2,tid:21)
25)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:22)
2,tid:22)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:3Create thread :(pid:3,tid:22)
,tid:22)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:2,tid:22)
master > end(pid:2,tid:22)
getValue(pid:2,tid:22)
master> addKeyValue(pid:Create thread :(pid:2,tid:22)
2,tid:22)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
*******************end Start update per generation
Tic::end used:0.026client(client(chen-5101(3)) exit.
(seconds).
chen-5101(2)end of program.
) exit.
client(chen-5101(1)end of program.
) exit.
end of program.
TestF(-1.88521e-316,100)
ends successfully!
end of program.
.
.
.
Test Example # 70
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(3) starts computing...
Runing chen-5101(2)DE_for_PEC  starts computing...

FunName(MyBestF,Optima)
Save file:Run-configuration-93.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
Create thread :(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:ClientThread> start(pid:1,tid:0)
3,tid:5)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:7)
7)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2ClientThread> start(pid:3,tid:7)
)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
master> addKeyValue(pid:Create thread :(pid:1,tid:4)
1,tid:4)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:3Create thread :(pid:3,tid:4)
,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
3,tid:1)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
getValue(pid:3,tid:1)
*******************Start update per generation
0:0.0673459
1:0.0673459
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10ClientThread> start(pid:1,tid:4)
)
master> addKeyValue(pid:2,tid:Create thread :(pid:2,tid:11)
11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:1,tid:4)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3Create thread :(pid:3,tid:16)
,tid:16)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2,tid:17)
Create thread :(pid:2,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:ClientThread> start(pid:3,tid:16)
13)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.
master > end(pid:3,tid:16)
ClientThread> start(pid:2,tid:17)
getValue(pid:3,tid:16)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3Create thread :(pid:3,tid:19)
,tid:19)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:3Create thread :(pid:3,tid:18)
,tid:18)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
2:6.44891e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)ClientThread> start(pid:1,tid:19)

master> addKeyValue(pid:3Create thread :(pid:3,tid:25)
,tid:25)
##end init.
master > end(pid:1,tid:19)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3ClientThread> start(pid:1,tid:23)
,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:ClientThread> start(pid:1,tid:28)
3,tid:29)
master> addKeyValue(pid:Create thread :(pid:3,tid:24)
3,tid:24)
master > end(pid:1,tid:28)
ClientThread> start(pid:2,tid:24)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:24)
1,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:3,tid:24)
master > end(pid:3,tid:24)
getValue(pid:3,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:21)
3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(3)) exit.
end used:end of program.end of program.
0.024(seconds).

client(chen-5101(2)) exit.
end of program.
TestF(-6.44891e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 71
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PECchen-5101(2) starts computing...
 
FunName(MyBestF,Optima)
Save file:Run-configuration-94.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
Create thread :(pid:1,tid:0)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1ClientThread> start(pid:1,tid:6)
,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:1,tid:8)
Create thread :(pid:1,tid:8)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:3,tid:9)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:1,tid:9)
Create thread :(pid:1,tid:9)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
*******************Start update per generation
0:0.351838
1:0.351838
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:ClientThread> start(pid:2,tid:11)
Create thread :(pid:1,tid:17)
1,tid:17)
master > end(pid:2,tid:11)
getValue(pid:ClientThread> start(pid:1,tid:13)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
Create thread :(pid:2,tid:18)
2Create thread :(pid:3,tid:12)
,tid:18)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
ClientThread> start(pid:3,tid:9)
Create thread :(pid:3,tid:15)
master > end(pid:3,tid:9)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15ClientThread> start(pid:1,tid:17)
)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3,tid:18)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
2:1.18077e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:3,tid:25)
##end init.
Create thread :(pid:3,tid:18)
Create thread :(pid:3,tid:22)
Create thread :(pid:3,tid:25)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:3,tid:26)
Create thread :(pid:3,tid:26)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:3,tid:27)
Create thread :(pid:3,tid:27)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:3,tid:28)
Create thread :(pid:3,tid:28)
ClientThread> start(pid:3,tid:28)
master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:3,tid:29)
###end middle.
Create thread :(pid:3,tid:29)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:1,tid:25)
Create thread :(pid:1,tid:25)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
ClientThread> start(pid:1,tid:25)
master > end(pid:1,tid:25)
getValue(pid:1,tid:25)
master> addKeyValue(pid:1,tid:21)
Create thread :(pid:1,tid:21)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
*******************end Start update per generation
Tic::end used:0.028(seconds).
client(chen-5101(2)) exit.
end of program.
client(TestF(-1.18077e-316,100)
ends successfully!
end of program.
chen-5101(1)) exit.
end of program.client(chen-5101(3)) exit.
end of program.


=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 72
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(2)chen-5101(3) starts computing...
chen-5101(1) starts computing...
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-95.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:3,tid:5)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2ClientThread> start(pid:2,tid:1)
)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
master > end(pid:2,tid:1)
ClientThread> start(pid:2,tid:6)
getValue(pid:2,tid:1)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:3,tid:7)
ClientThread> start(pid:1,tid:0)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)ClientThread> start(pid:1,tid:8)

master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
*******************Start update per generation
0:0.221982
1:0.221982
refreshID=ClientThread> start(pid:2,tid:8)
0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:2,tid:8)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:ClientThread> start(pid:2,tid:11)
10)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:12)
2,tid:18)
Create thread :(pid:2,tid:18)
master > end(pid:3,tid:12)
ClientThread> start(pid:1,tid:13)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)ClientThread> start(pid:3,tid:16)

master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
2:6.05024e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)ClientThread> start(pid:2,tid:21)

master > end(pid:2,tid:21)
ClientThread> start(pid:3,tid:22)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2ClientThread> start(pid:1,tid:23)
,tid:29)
###end middle.
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)ClientThread> start(pid:1,tid:28)

master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.
end of program.
end used:0.029(seconds).
TestF(-6.05024e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 73
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-96.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1ClientThread> start(pid:3,tid:5)
,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:2,tid:7)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:8)
Create thread :(pid:2,tid:7)
Create thread :(pid:3,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)ClientThread> start(pid:1,tid:0)

master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:2,tid:9)
Create thread :(pid:2,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:3,tid:9)
Create thread :(pid:3,tid:9)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
*******************Start update per generation
0:0.755566
1:0.755566
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
Create thread :(pid:3,tid:12)
Create thread :(pid:3,tid:15)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3,tid:16)
Create thread :(pid:3,tid:16)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)ClientThread> start(pid:1,tid:13)

master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:ClientThread> start(pid:2,tid:14)
17)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)ClientThread> start(pid:1,tid:18)

master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
2:1.27993e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:3Create thread :(pid:3,tid:25)
,tid:25)
##end init.
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2ClientThread> start(pid:3,tid:25)
,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:ClientThread> start(pid:1,tid:23)
Create thread :(pid:2,tid:28)
2ClientThread> start(pid:2,tid:18)
,tid:28)
master > end(pid:2,tid:18)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
###end middle.
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27ClientThread> start(pid:3,tid:27)
)
ClientThread> start(pid:1,tid:29)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
*******************end Start update per generation
Tic::end used:client(client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
0.025(seconds).
chen-5101(1)end of program.
end of program.
) exit.
end of program.
TestF(-1.27993e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 74
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(2) starts computing...chen-5101(3) starts computing...
chen-5101(1) starts computing...

Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-97.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:2,tid:1)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
Create thread :(pid:3,tid:5)
getValue(pid:ClientThread> start(pid:1,tid:0)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2ClientThread> start(pid:3,tid:2)
,tid:6)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:1,tid:7)
Create thread :(pid:1,tid:7)
master > end(pid:3,tid:2)
getValue(pid:ClientThread> start(pid:3,tid:5)
3,tid:2)
master> addKeyValue(pid:3,tid:8)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:9)
###end middle.
Create thread :(pid:3,tid:8)
Create thread :(pid:3,tid:9)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
ClientThread> start(pid:2,tid:6)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:9)
Create thread :(pid:3,tid:3)
3,tid:3)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:1)
master> addKeyValue(pid:2,tid:3)
Create thread :(pid:2,tid:3)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
ClientThread> start(pid:3,tid:3)
master > end(pid:3,tid:3)
getValue(pid:3,tid:3)
*******************Start update per generation
0:0.0456693
1:0.0456693
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:3Create thread :(pid:1,tid:10)
,tid:12)
master> addKeyValue(pid:1,tid:13)
master> addKeyValue(pid:2,tid:14)
Create thread :(pid:3,tid:12)
master> addKeyValue(pid:3,tid:15)
##end init.
Create thread :(pid:1,tid:13)
Create thread :(pid:3,tid:15)
Create thread :(pid:2,tid:11)
Create thread :(pid:2,tid:14)
ClientThread> start(pid:3,tid:12)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2ClientThread> start(pid:2,tid:14)
,tid:ClientThread> start(pid:1,tid:13)
11)ClientThread> start(pid:3,tid:15)

ClientThread> start(pid:1,tid:10)
master> addKeyValue(pid:2,tid:16)
master > end(pid:2,tid:14)
getValue(pid:Create thread :(pid:2,tid:16)
2,tid:14)
master> addKeyValue(pid:2,tid:17)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3,tid:18)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)Create thread :(pid:2,tid:17)

master> addKeyValue(pid:3,tid:19)
###end middle.
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
Create thread :(pid:3,tid:18)
Create thread :(pid:3,tid:19)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:1,tid:17)
Create thread :(pid:1,tid:17)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
master> addKeyValue(pid:1,tid:17)
Create thread :(pid:1,tid:17)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)ClientThread> start(pid:2,tid:16)

master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
master> addKeyValue(pid:1,tid:18)
Create thread :(pid:1,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:ClientThread> start(pid:3,tid:18)
18)
2:1.43292e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:20)
master> addKeyValue(pid:2,tid:21)
master> addKeyValue(pid:3,tid:22)
master> addKeyValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:24)
master> addKeyValue(pid:3,tid:25)
##end init.
Create thread :(pid:2,tid:24)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:2,tid:26)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2,tid:27)
Create thread :(pid:1,tid:20)
Create thread :(pid:1,tid:23)
ClientThread> start(pid:1,tid:20)
ClientThread> start(pid:2,tid:21)
Create thread :(pid:2,tid:26)
ClientThread> start(pid:2,tid:24)
Create thread :(pid:2,tid:27)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:1,tid:28)
Create thread :(pid:1,tid:28)
Create thread :(pid:3,tid:22)
ClientThread> start(pid:1,tid:3)
Create thread :(pid:3,tid:25)
master > end(pid:1,tid:3)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:3,tid:29)
###end middle.
Create thread :(pid:3,tid:29)
ClientThread> start(pid:2,tid:3)
master > end(pid:2,tid:3)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:1,tid:23)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
master> addKeyValue(pid:Create thread :(pid:3,tid:23)
3,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:23)
2,tid:23)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.014(seconds).
TestF(-1.43292e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 75
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...
chen-5101(3)
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-98.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:1,tid:3)
ClientThread> start(pid:1,tid:0)
ClientThread> start(pid:3,tid:5)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:1,tid:6)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0Create thread :(pid:1,tid:6)
)
master> addKeyValue(pid:1,tid:7)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:8)
Create thread :(pid:3,tid:8)
ClientThread> start(pid:2,tid:1)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:1)
Create thread :(pid:1,tid:7)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6ClientThread> start(pid:2,tid:9)
)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
ClientThread> start(pid:1,tid:7)
ClientThread> start(pid:3,tid:6)
ClientThread> start(pid:1,tid:6)
ClientThread> start(pid:2,tid:6)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:2,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:3,tid:6)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
*******************Start update per generation
Create thread :(pid:2,tid:6)
0:0.785249
1:0.785249
refreshID=0
numTasks=10
numSlave=3
Create thread :(pid:3,tid:6)
master> addKeyValue(pid:1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:3,tid:12)
master> addKeyValue(pid:1,tid:13Create thread :(pid:1,tid:10)
Create thread :(pid:2,tid:11)
)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
master > end(pid:1,tid:6)
Create thread :(pid:1,tid:13)
Create thread :(pid:2,tid:14)
Create thread :(pid:3,tid:12)
Create thread :(pid:3,tid:15)
ClientThread> start(pid:1,tid:13)
ClientThread> start(pid:3,tid:15)
ClientThread> start(pid:2,tid:14)
ClientThread> start(pid:2,tid:11)
ClientThread> start(pid:3,tid:12)
ClientThread> start(pid:2,tid:6)
ClientThread> start(pid:1,tid:10)
ClientThread> start(pid:3,tid:6)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2,tid:16)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2,tid:17)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3,tid:18)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3,tid:19Create thread :(pid:3,tid:18)
)
###end middle.
master > end(pid:2,tid:6)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10Create thread :(pid:3,tid:19)
)
master> addKeyValue(pid:1,tid:16)
master > end(pid:3,tid:6)
Create thread :(pid:1,tid:16)
Create thread :(pid:2,tid:16)
Create thread :(pid:2,tid:17)
ClientThread> start(pid:3,tid:19)
ClientThread> start(pid:1,tid:16)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master > end(pid:1,tid:16)
getValue(pid:1,tid:16)
master> addKeyValue(pid:1,tid:18)
Create thread :(pid:1,tid:18)
ClientThread> start(pid:3,tid:18)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:2,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
Create thread :(pid:2,tid:18)
2:1.74801e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:20)
master> addKeyValue(pid:2,tid:21)
master> addKeyValue(pid:3,tid:22Create thread :(pid:1,tid:20)
)
master> addKeyValue(pid:1,tid:23)
master> addKeyValue(pid:2Create thread :(pid:2,tid:21)
,tid:24)
master> addKeyValue(pid:3,tid:25)
##end init.
Create thread :(pid:1,tid:23)
Create thread :(pid:2,tid:24)
Create thread :(pid:3,tid:22)
Create thread :(pid:3,tid:25)
ClientThread> start(pid:2,tid:24)
ClientThread> start(pid:1,tid:23)
ClientThread> start(pid:3,tid:25)
ClientThread> start(pid:1,tid:20)
ClientThread> start(pid:2,tid:21)
ClientThread> start(pid:1,tid:18)
ClientThread> start(pid:3,tid:22)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:1,tid:26)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:1,tid:27)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2,tid:28)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:2,tid:29)
###end middle.Create thread :(pid:2,tid:28)

master > end(pid:1,tid:18)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
Create thread :(pid:2,tid:29)
master> addKeyValue(pid:3,tid:26)
Create thread :(pid:3,tid:26)
Create thread :(pid:1,tid:26)
Create thread :(pid:1,tid:27)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
ClientThread> start(pid:2,tid:28)
ClientThread> start(pid:3,tid:26)
ClientThread> start(pid:2,tid:29)
ClientThread> start(pid:1,tid:27)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:3,tid:26)
Create thread :(pid:3,tid:26)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::end used:0.051(seconds).
client(chen-5101(1)) exit.
end of program.
client(chen-5101(3)) exit.
end of program.
TestF(-1.74801e-316,100)
ends successfully!
client(end of program.
chen-5101(2)) exit.
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 76
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(3) starts computing...
chen-5101(2) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-99.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
2,tid:1)
master> addKeyValue(pid:3,tid:2)
Create thread :(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:3)
Create thread :(pid:3,tid:5)
Create thread :(pid:2,tid:4)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3Create thread :(pid:3,tid:6)
,tid:6)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
*******************Start update per generation
0:0.203193
1:0.203193
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2Create thread :(pid:2,tid:17)
,tid:17)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:ClientThread> start(pid:1,tid:9)
18)
master > end(pid:1,tid:9)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:3Create thread :(pid:3,tid:16)
,tid:16)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
2:1.23379e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
ClientThread> start(pid:2,tid:16)
master> addKeyValue(pid:2Create thread :(pid:2,tid:21)
,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:2,tid:16)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20ClientThread> start(pid:3,tid:29)
)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
ClientThread> start(pid:1,tid:27)
getValue(pid:2,tid:28)
ClientThread> start(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:2,tid:25)
2,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
end of program.end of program.
end used:
client(chen-5101(3)) exit.
0.02(seconds).
end of program.
TestF(-1.23379e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 77
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(3)
 starts computing...
Runing chen-5101(2) starts computing...
DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-100.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1Create thread :(pid:1,tid:0)
,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:3,tid:2)
2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:3,tid:5)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:1,tid:6)
Create thread :(pid:1,tid:6)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:3,tid:7)
Create thread :(pid:3,tid:7)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:8)
Create thread :(pid:3,tid:8)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:1,tid:9)
###end middle.Create thread :(pid:1,tid:9)

ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:3,tid:4)
Create thread :(pid:3,tid:4)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
master> addKeyValue(pid:1,tid:4)
Create thread :(pid:1,tid:4)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:1,tid:4)
master > end(pid:1,tid:4)
getValue(pid:1,tid:4)
master> addKeyValue(pid:1,tid:4)
Create thread :(pid:1,tid:4)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
*******************Start update per generation
0:0.623343
1:0.623343
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
Create thread :(pid:3,tid:12)
1,tid:13)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
Create thread :(pid:2,tid:11)
Create thread :(pid:2,tid:14)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3,tid:16)
Create thread :(pid:3,tid:16)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3,tid:17)
Create thread :(pid:3,tid:17)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:3,tid:18)
Create thread :(pid:3,tid:18)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:1,tid:19)
###end middle.
Create thread :(pid:1,tid:19)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
master> addKeyValue(pid:3,tid:19)
Create thread :(pid:3,tid:19)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
master> addKeyValue(pid:1,tid:14)
Create thread :(pid:1,tid:14)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:1,tid:4)
master > end(pid:1,tid:4)
ClientThread> start(pid:1,tid:14)
master > end(pid:1,tid:14)
getValue(pid:1,tid:14)
master> addKeyValue(pid:1,tid:19)
Create thread :(pid:1,tid:19)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
2:1.42867e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
Create thread :(pid:2,tid:21)
Create thread :(pid:2,tid:24)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:26)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3,tid:27)
Create thread :(pid:3,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:1,tid:28)
Create thread :(pid:1,tid:28)
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
###end middle.ClientThread> start(pid:3,tid:22)

master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:29)
29)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
master> addKeyValue(pid:1,tid:24)
Create thread :(pid:1,tid:24)
ClientThread> start(pid:1,tid:24)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master > end(pid:1,tid:24)
getValue(pid:1,tid:24)
master> addKeyValue(pid:1,tid:29)
Create thread :(pid:1,tid:29)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
master> addKeyValue(pid:3,tid:21)
Create thread :(pid:3,tid:21)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
*******************end Start update per generation
Tic::end used:0.035client(client(chen-5101(3)) exit.
(seconds).
chen-5101(1)) exit.
TestF(-1.42867e-316,100)
ends successfully!
end of program.end of program.

end of program.client(chen-5101(2)) exit.
end of program.


=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 78
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...
chen-5101(3)
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-101.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
Create thread :(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:1,tid:6)Create thread :(pid:1,tid:6)

ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:3,tid:5)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:2,tid:7)
Create thread :(pid:2,tid:7)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:1,tid:8)
Create thread :(pid:1,tid:8)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:9)
###end middle.
Create thread :(pid:3,tid:9)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
ClientThread> start(pid:3,tid:9)
getValue(pid:2ClientThread> start(pid:1,tid:8)
,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
*******************Start update per generation
0:0.405446
1:0.405446
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
ClientThread> start(pid:1,tid:10)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)ClientThread> start(pid:1,tid:13)

master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.
ClientThread> start(pid:2,tid:16)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
2:1.45862e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)ClientThread> start(pid:1,tid:23)

master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
###end middle.ClientThread> start(pid:2,tid:26)

master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:ClientThread> start(pid:2,tid:28)
20)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end of program.

end used:0.021(seconds).
TestF(-1.45862e-316,100)
ends successfully!
end of program.
.
.
.
Test Example # 79
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(3) starts computing...

chen-5101(2) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-102.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
Create thread :(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1Create thread :(pid:2,tid:1)
)
master> addKeyValue(pid:3,tid:2Create thread :(pid:3,tid:2)
)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:2Create thread :(pid:2,tid:4)
,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:ClientThread> start(pid:1,tid:3)
Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)ClientThread> start(pid:3,tid:5)

ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:ClientThread> start(pid:1,tid:8)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:5)
master> addKeyValue(pid:3,tid:5)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
Create thread :(pid:3,tid:5)
*******************Start update per generation
0:0.364695
1:0.364695
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
2,tid:11)
master> addKeyValue(pid:3,tid:12)
master> addKeyValue(pid:1,tid:13)
Create thread :(pid:2,tid:11)
ClientThread> start(pid:3,tid:5)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
master > end(pid:2,tid:5)
master > end(pid:3,tid:5)
Create thread :(pid:2,tid:14)
Create thread :(pid:1,tid:13)
Create thread :(pid:3,tid:12)
Create thread :(pid:3,tid:15)
ClientThread> start(pid:1,tid:10)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2,tid:16)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:1,tid:17)
Create thread :(pid:2,tid:16)
Create thread :(pid:1,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3,tid:18)
Create thread :(pid:3,tid:18)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:2,tid:19)
###end middle.
Create thread :(pid:2,tid:19)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:1,tid:13)
ClientThread> start(pid:3,tid:15)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:1,tid:17)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:1.02312e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:1,tid:23)
master> addKeyValue(pid:2,tid:28)
Create thread :(pid:2,tid:28)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1ClientThread> start(pid:3,tid:25)
,tid:29)
###end middle.
master > end(pid:3,tid:25)
getValue(pid:3,tid:25ClientThread> start(pid:2,tid:26)
)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)ClientThread> start(pid:1,tid:29)

master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.02(seconds).
TestF(-1.02312e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 80
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(2) starts computing...
chen-5101(3) starts computing...
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-103.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:1,tid:0)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:1,tid:0)
getValue(pid:ClientThread> start(pid:1,tid:6)
1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
ClientThread> start(pid:2,tid:1)
3,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
2,tid:1)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
*******************Start update per generation
0:0.345501
1:0.345501
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)ClientThread> start(pid:3,tid:15)

master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)ClientThread> start(pid:3,tid:12)

master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
ClientThread> start(pid:2,tid:16)
3,tid:19)
###end middle.
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
2:1.79394e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:25)
2,tid:26)
Create thread :(pid:2,tid:26)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:1,tid:28)
ClientThread> start(pid:2,tid:21)
Create thread :(pid:1,tid:28)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.023(seconds).
TestF(-1.79394e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 81
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...chen-5101(3)

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-104.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
Create thread :(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:ClientThread> start(pid:1,tid:0)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
3,tid:1)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
2,tid:1)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
*******************Start update per generation
0:0.958091
1:0.958091
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2Create thread :(pid:2,tid:17)
,tid:17)
ClientThread> start(pid:2,tid:11)
ClientThread> start(pid:3,tid:12)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11ClientThread> start(pid:1,tid:13)
)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
2:1.61201e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
ClientThread> start(pid:2,tid:21)
1,tid:ClientThread> start(pid:3,tid:22)
28)ClientThread> start(pid:1,tid:23)

master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:26)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.02(seconds).
TestF(-1.61201e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 82
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(2)chen-5101(3) starts computing... starts computing...
 starts computing...

Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-105.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:3,tid:5)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2ClientThread> start(pid:1,tid:3)
,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)ClientThread> start(pid:2,tid:1)

master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9ClientThread> start(pid:1,tid:0)
)
###end middle.
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)ClientThread> start(pid:2,tid:6)

master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)ClientThread> start(pid:3,tid:7)

master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7ClientThread> start(pid:1,tid:8)
)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
*******************Start update per generation
0:0.420264
1:0.420264
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
ClientThread> start(pid:3,tid:15)
2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:1,tid:13)
ClientThread> start(pid:2,tid:7)
master > end(pid:1,tid:13)
getValue(pid:1,tid:ClientThread> start(pid:1,tid:9)
13)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
ClientThread> start(pid:2,tid:16)
1ClientThread> start(pid:2,tid:11)
,tid:19)
###end middle.
master > end(pid:1,tid:9)
master > end(pid:2,tid:7)
master > end(pid:2,tid:16)
getValue(pid:2,tid:ClientThread> start(pid:3,tid:17)
16)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2,tid:19)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
Create thread :(pid:2,tid:19)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3,tid:19Create thread :(pid:3,tid:19)
)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
2:3.78169e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
Create thread :(pid:1,tid:20)
Create thread :(pid:1,tid:23)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3ClientThread> start(pid:2,tid:24)
,tid:27)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.
end of program.
end used:0.026(seconds).
TestF(-3.78169e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 83
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(2) starts computing...
chen-5101(1)chen-5101(3) starts computing...Runing 
DE_for_PEC 
FunName(MyBestF,Optima)
 starts computing...
Save file:Run-configuration-106.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:Create thread :(pid:1,tid:0)
0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:2)
2)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:3Create thread :(pid:3,tid:5)
,tid:5)
##end init.
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)ClientThread> start(pid:2,tid:9)

master> addKeyValue(pid:Create thread :(pid:1,tid:5)
1,tid:5)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:2Create thread :(pid:2,tid:5)
,tid:5)
ClientThread> start(pid:1,tid:5)
master > end(pid:1,tid:5)
getValue(pid:1,tid:5)
master> addKeyValue(pid:Create thread :(pid:1,tid:5)
1,tid:5)
ClientThread> start(pid:1,tid:5)
master > end(pid:1,tid:5)
getValue(pid:1,tid:5)
ClientThread> start(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:1,tid:5)
1,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:1,tid:5)
master > end(pid:1,tid:5)
getValue(pid:1,tid:5)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
*******************Start update per generation
0:0.495493
1:0.495493
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:3Create thread :(pid:3,tid:12)
,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
Create thread :(pid:2,tid:11)
Create thread :(pid:2,tid:14)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:ClientThread> start(pid:3,tid:16)
16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:3Create thread :(pid:3,tid:18)
,tid:18)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:13)
3,tid:13)
ClientThread> start(pid:3,tid:13)
master > end(pid:3,tid:13)
getValue(pid:3,tid:13)
master> addKeyValue(pid:Create thread :(pid:3,tid:13)
3,tid:13)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
ClientThread> start(pid:3,tid:13)
master > end(pid:3,tid:13)
getValue(pid:3,tid:13)
master> addKeyValue(pid:Create thread :(pid:3,tid:13)
3,tid:13)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:13)
2,tid:13)
ClientThread> start(pid:3,tid:13)
master > end(pid:3,tid:13)
getValue(pid:3,tid:13)
master> addKeyValue(pid:Create thread :(pid:3,tid:13)
3,tid:13)
ClientThread> start(pid:3,tid:13)
master > end(pid:3,tid:13)
getValue(pid:3,tid:13)
master> addKeyValue(pid:3Create thread :(pid:3,tid:13)
,tid:13)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
2:1.23905e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:13)
master > end(pid:3,tid:13)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
ClientThread> start(pid:1,tid:28)
ClientThread> start(pid:2,tid:27)
master > end(pid:1,tid:28)
ClientThread> start(pid:2,tid:13)
getValue(pid:1,tid:28)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master > end(pid:2,tid:13)
ClientThread> start(pid:1,tid:20)
ClientThread> start(pid:2,tid:29)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:25)
1,tid:25)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
master> addKeyValue(pid:Create thread :(pid:2,tid:25)
2,tid:25)
ClientThread> start(pid:1,tid:25)
master > end(pid:1,tid:25)
getValue(pid:1,tid:25)
master> addKeyValue(pid:Create thread :(pid:1,tid:25)
1,tid:25)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
ClientThread> start(pid:1,tid:25)
master > end(pid:1,tid:25)
getValue(pid:1,tid:25)
master> addKeyValue(pid:Create thread :(pid:1,tid:22)
1,tid:22)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:Create thread :(pid:2,tid:22)
2,tid:22)
ClientThread> start(pid:1,tid:22)
master > end(pid:1,tid:22)
getValue(pid:1,tid:22)
*******************end Start update per generation
Tic::client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.
endclient(chen-5101(1)) exit.
 used:end of program.
0.029(seconds).
TestF(-1.23905e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 84
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2)chen-5101(3) starts computing...
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-107.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
2,tid:1)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:2)
2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:2Create thread :(pid:2,tid:4)
,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
###end middle.
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:4)
1,tid:4)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:3Create thread :(pid:3,tid:1)
,tid:1)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
getValue(pid:3,tid:1)
*******************Start update per generation
0:0.589458
1:0.589458
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:2Create thread :(pid:2,tid:11)
,tid:11)
master> addKeyValue(pid:3,tid:12)
Create thread :(pid:3,tid:12)
master> addKeyValue(pid:1,tid:13)
Create thread :(pid:1,tid:13)
master> addKeyValue(pid:2Create thread :(pid:2,tid:14)
,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
Create thread :(pid:3,tid:15)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
ClientThread> start(pid:1,tid:4)
master > end(pid:1,tid:4)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2ClientThread> start(pid:2,tid:14)
,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
ClientThread> start(pid:2,tid:16)
###end middle.
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:ClientThread> start(pid:3,tid:15)
2,tid:17)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
master> addKeyValue(pid:3Create thread :(pid:3,tid:19)
,tid:19)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
2:1.42725e-316
refreshID=0
numTasks=10ClientThread> start(pid:2,tid:19)

numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:2,tid:21)
master> addKeyValue(pid:3,tid:22)
master> addKeyValue(pid:1,tid:23)
master> addKeyValue(pid:2Create thread :(pid:2,tid:21)
,tid:24)
master> addKeyValue(pid:3,tid:25)
##end init.
master > end(pid:2,tid:19)
Create thread :(pid:2,tid:24)
Create thread :(pid:3,tid:22)
Create thread :(pid:3,tid:25)
Create thread :(pid:1,tid:23)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:ClientThread> start(pid:1,tid:23)
1,tid:20)
master> addKeyValue(pid:1Create thread :(pid:1,tid:26)
,tid:26)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2ClientThread> start(pid:3,tid:25)
,tid:Create thread :(pid:2,tid:28)
28)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3Create thread :(pid:3,tid:29)
,tid:29)
###end middle.
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27ClientThread> start(pid:3,tid:22)
)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
end of program.end of program.
end used:0.025(seconds).
client(chen-5101(3)) exit.
end of program.
TestF(-1.42725e-316,100)
ends successfully!
end of program.

.
.
.
Test Example # 85
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(3) starts computing...
 starts computing...
Runing chen-5101(2) starts computing...
DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-108.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2Create thread :(pid:1,tid:0)
Create thread :(pid:2,tid:1)
,tid:1)
master> addKeyValue(pid:3Create thread :(pid:3,tid:2)
,tid:2)
master> addKeyValue(pid:Create thread :(pid:1,tid:3)
1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:3,tid:5)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2ClientThread> start(pid:1,tid:0)
,tid:1)
master> addKeyValue(pid:2Create thread :(pid:2,tid:9)
,tid:9)
###end middle.
master > end(pid:1,tid:0)
getValue(pid:1,tid:0ClientThread> start(pid:1,tid:6)
)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
ClientThread> start(pid:1,tid:8)
master> addKeyValue(pid:2,tid:5)Create thread :(pid:2,tid:5)

master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:5)
1,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)
ClientThread> start(pid:1,tid:5)
master > end(pid:1,tid:5)
getValue(pid:1,tid:5)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
*******************Start update per generation
0:0.670157
1:0.670157
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1ClientThread> start(pid:3,tid:2)
,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:15)
15)
##end init.
master > end(pid:3,tid:2)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:16)
1,tid:16)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:3,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:3,tid:Create thread :(pid:3,tid:19)
19)
###end middle.
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
ClientThread> start(pid:1,tid:16)
master > end(pid:1,tid:16)
getValue(pid:1,tid:16)
master> addKeyValue(pid:Create thread :(pid:1,tid:15)
1,tid:15)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
ClientThread> start(pid:1,tid:15)
master > end(pid:1,tid:15)
getValue(pid:1,tid:15)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:3Create thread :(pid:3,tid:11)
,tid:11)
ClientThread> start(pid:3,tid:11)
master > end(pid:3,tid:11)
getValue(pid:3,tid:11)
2:ClientThread> start(pid:2,tid:11)
2.00441e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:2Create thread :(pid:2,tid:21)
,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:2Create thread :(pid:2,tid:24)
,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:2,tid:11)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2Create thread :(pid:2,tid:27)
,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:2Create thread :(pid:2,tid:28)
,tid:28ClientThread> start(pid:1,tid:20)
)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
###end middle.
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
ClientThread> start(pid:1,tid:19)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master > end(pid:1,tid:19)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:25)
2,tid:25)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
master> addKeyValue(pid:Create thread :(pid:1,tid:25)
1,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:Create thread :(pid:2,tid:25)
2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
ClientThread> start(pid:3,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:Create thread :(pid:2,tid:25)
2,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:Create thread :(pid:2,tid:22)
2,tid:22)
ClientThread> start(pid:1,tid:25)
master > end(pid:1,tid:25)
getValue(pid:1,tid:25)
master> addKeyValue(pid:Create thread :(pid:1,tid:22)
1,tid:22)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
end of program.
end of program.
end used:client(0.03(seconds).
chen-5101(3)) exit.
end of program.
TestF(-2.00441e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 86
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-109.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:3,tid:2)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:ClientThread> start(pid:3,tid:6)
8)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3ClientThread> start(pid:2,tid:7)
,tid:9)
###end middle.
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:3)
2,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:Create thread :(pid:3,tid:3)
3,tid:3)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
*******************Start update per generation
0:0.361185
1:0.361185
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:3,tid:12)
master> addKeyValue(pid:1,tid:13)
master> addKeyValue(pid:2Create thread :(pid:2,tid:11)
Create thread :(pid:3,tid:12)
,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
Create thread :(pid:2,tid:14)
Create thread :(pid:3,tid:15)
Create thread :(pid:1,tid:13)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:ClientThread> start(pid:2,tid:14)
3,tid:12ClientThread> start(pid:1,tid:13)
)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
master > end(pid:1,tid:13)
getValue(pid:ClientThread> start(pid:3,tid:16)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:2,tid:3)
master > end(pid:2,tid:3)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
ClientThread> start(pid:3,tid:3)
master > end(pid:3,tid:3)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:ClientThread> start(pid:1,tid:10)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)ClientThread> start(pid:3,tid:18)

master > end(pid:1,tid:10)
getValue(pid:1,tid:10ClientThread> start(pid:1,tid:18)
)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
2:1.08727e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:3,tid:18)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29ClientThread> start(pid:3,tid:29)
)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end of program.

end used:0.03(seconds).
TestF(-1.08727e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 87
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(2) starts computing...
chen-5101(3) starts computing...
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-110.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.Create thread :(pid:2,tid:1)

Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:1,tid:0)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:ClientThread> start(pid:1,tid:6)
7)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)ClientThread> start(pid:3,tid:2)

master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
*******************Start update per generation
0:0.914778
1:0.914778
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
ClientThread> start(pid:3,tid:15)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)ClientThread> start(pid:3,tid:12)

master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
2:1.46064e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:20)Create thread :(pid:1,tid:20)

master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:1,tid:23)Create thread :(pid:1,tid:23)

master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1ClientThread> start(pid:3,tid:22)
,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1ClientThread> start(pid:2,tid:24)
,tid:ClientThread> start(pid:1,tid:23)
27)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
ClientThread> start(pid:3,tid:26)
1,tid:28)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)ClientThread> start(pid:1,tid:18)

master > end(pid:1,tid:18)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
ClientThread> start(pid:2,tid:29)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.021(seconds).
TestF(-1.46064e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 88
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-111.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:3,tid:5)
ClientThread> start(pid:2,tid:4)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:2,tid:1)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:3,tid:6)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
ClientThread> start(pid:2,tid:9)
master> addKeyValue(pid:Create thread :(pid:3,tid:3)
3,tid:3)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:Create thread :(pid:2,tid:3)
2,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
*******************Start update per generation
0:0.453374
1:0.453374
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:3)
master > end(pid:3,tid:3)
ClientThread> start(pid:2,tid:3)
master > end(pid:2,tid:3)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:2,tid:14)
master> addKeyValue(pid:1,tid:16)
Create thread :(pid:1,tid:16)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:1,tid:16)
ClientThread> start(pid:3,tid:15)
master > end(pid:1,tid:16)
getValue(pid:1,tid:16)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
2:1.77027e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3ClientThread> start(pid:1,tid:23)
,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3ClientThread> start(pid:2,tid:24)
,tid:27)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
master > end(pid:2,tid:24)
ClientThread> start(pid:3,tid:26)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
*******************end Start update per generation
Tic::end used:client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(0.028(seconds).
end of program.end of program.

TestF(-1.77027e-316,100)
ends successfully!
end of program.
chen-5101(3)) exit.
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 89
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-112.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
Create thread :(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)Create thread :(pid:2,tid:1)

##end init.
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:3,tid:5)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:1,tid:3)
master> addKeyValue(pid:2,tid:6)
Create thread :(pid:2,tid:6)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)ClientThread> start(pid:1,tid:0)

master> addKeyValue(pid:2,tid:9ClientThread> start(pid:2,tid:6)
)
###end middle.
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
Create thread :(pid:2,tid:9)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:1,tid:7)
Create thread :(pid:1,tid:7)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:Create thread :(pid:2,tid:2)
2,tid:2)
ClientThread> start(pid:1,tid:7)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:2)
1,tid:2)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
*******************Start update per generation
0:0.0133245
1:0.0133245
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:1,tid:13)
ClientThread> start(pid:2,tid:14)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:ClientThread> start(pid:1,tid:10)
Create thread :(pid:1,tid:17)
1,tid:17)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:ClientThread> start(pid:3,tid:12)
18)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)ClientThread> start(pid:3,tid:16)

master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
ClientThread> start(pid:1,tid:2)
master > end(pid:1,tid:2)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
2:1.17753e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:17)
Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:3,tid:17)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)ClientThread> start(pid:3,tid:25)

master > end(pid:3,tid:25)
ClientThread> start(pid:2,tid:26)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3,tid:29)
###end middle.
Create thread :(pid:3,tid:29)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.
end of program.
end used:0.031(seconds).
TestF(-1.17753e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 90
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...
chen-5101(3)
 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-113.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:1,tid:0)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:1,tid:0)
ClientThread> start(pid:1,tid:6)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
3,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:ClientThread> start(pid:1,tid:8)
Create thread :(pid:2,tid:1)
2,tid:1)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
*******************Start update per generation
0:0.678846
1:0.678846
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:3,tid:12)
ClientThread> start(pid:1,tid:13)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
2:1.09395e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1ClientThread> start(pid:3,tid:22)
,tid:23)
ClientThread> start(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:2,tid:21)
master> addKeyValue(pid:1,tid:29)
###end middle.
Create thread :(pid:1,tid:29)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:2,tid:28)
Create thread :(pid:2,tid:28)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:3,tid:28)
Create thread :(pid:3,tid:28)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
*******************end Start update per generation
Tic::end used:client(chen-5101(1)) exit.
client(0.02(seconds).
client(chen-5101(2)) exit.
end of program.chen-5101(3)) exit.

end of program.
TestF(-1.09395e-316,100)
ends successfully!
end of program.
end of program.
.
.
.
Test Example # 91
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(2)chen-5101(1) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC starts computing...
 
FunName(MyBestF,Optima)
Save file:Run-configuration-114.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:1,tid:0)
master> addKeyValue(pid:3,tid:7)
Create thread :(pid:3,tid:7)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
master> addKeyValue(pid:Create thread :(pid:1,tid:5)
1,tid:5)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
*******************Start update per generation
0:0.308869
1:0.308869
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:3,tid:12)
Create thread :(pid:3,tid:12)
master> addKeyValue(pid:1,tid:13)Create thread :(pid:1,tid:13)

master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:3Create thread :(pid:3,tid:15)
,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2ClientThread> start(pid:3,tid:5)
,tid:Create thread :(pid:2,tid:16)
16)
master > end(pid:3,tid:5)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
ClientThread> start(pid:1,tid:5)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2Create thread :(pid:2,tid:19)
,tid:19)
###end middle.
master > end(pid:1,tid:5)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
ClientThread> start(pid:2,tid:19)
ClientThread> start(pid:1,tid:13)
master > end(pid:2,tid:19)
getValue(pid:2ClientThread> start(pid:3,tid:12)
,tid:19)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:13)
3,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:Create thread :(pid:2,tid:13)
2,tid:13)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)ClientThread> start(pid:3,tid:13)

2:1.2265e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:3,tid:13)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
ClientThread> start(pid:1,tid:23)
3,tid:26)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:2,tid:28)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:ClientThread> start(pid:3,tid:26)
27)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3Create thread :(pid:3,tid:27)
,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
ClientThread> start(pid:2,tid:13)
master > end(pid:2,tid:13)
ClientThread> start(pid:3,tid:27)
master > end(pid:3,tid:27)
getValue(pid:3,tid:27)
master> addKeyValue(pid:3,tid:27)
Create thread :(pid:3,tid:27)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
*******************end Start update per generation
Tic::end used:0.022(seconds).
client(chen-5101(2)) exit.
end of program.client(TestF(-1.2265e-316,100)
ends successfully!
chen-5101(1)end of program.
client(chen-5101(3)) exit.
end of program.
) exit.
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 92
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(3) starts computing...
chen-5101(2) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-115.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
2,tid:1)
master> addKeyValue(pid:3,tid:2)
Create thread :(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
Create thread :(pid:1,tid:3)
master> addKeyValue(pid:2,tid:Create thread :(pid:2,tid:4)
4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
ClientThread> start(pid:2,tid:6)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:5)
1,tid:5)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
master> addKeyValue(pid:2Create thread :(pid:2,tid:5)
,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2Create thread :(pid:2,tid:5)
,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2Create thread :(pid:2,tid:2)
,tid:2)
ClientThread> start(pid:2,tid:2)
master > end(pid:2,tid:2)
getValue(pid:2,tid:2)
*******************Start update per generation
0:0.0773351
1:0.0773351
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:ClientThread> start(pid:3,tid:2)
2Create thread :(pid:2,tid:14)
,tid:14)
master> addKeyValue(pid:3,tid:15)
##end init.
Create thread :(pid:3,tid:15)
master > end(pid:3,tid:2)
ClientThread> start(pid:1,tid:5)
master > end(pid:1,tid:5)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2Create thread :(pid:2,tid:16)
,tid:16)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:1,tid:17)
Create thread :(pid:1,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3,tid:18)
Create thread :(pid:3,tid:18)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3,tid:19)
###end middle.
Create thread :(pid:3,tid:19)
ClientThread> start(pid:3,tid:18)
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:14)
3,tid:14)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:3,tid:14)
master > end(pid:3,tid:14)
getValue(pid:3,tid:14)
2ClientThread> start(pid:1,tid:17)
:1.91213e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:1,tid:17)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)ClientThread> start(pid:1,tid:23)

master> addKeyValue(pid:3,tid:26)
Create thread :(pid:3,tid:26)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2Create thread :(pid:2,tid:29)
,tid:29)
###end middle.
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
*******************end Start update per generation
Tic::end used:client(client(chen-5101(3)) exit.
0.023(seconds).
end of program.
TestF(-1.91213e-316,100)
ends successfully!
client(chen-5101(2)) exit.
end of program.
end of program.
chen-5101(1)) exit.
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 93
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2)chen-5101(3) starts computing...

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-116.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2Create thread :(pid:2,tid:1)
,tid:Create thread :(pid:1,tid:0)
1)
master> addKeyValue(pid:3Create thread :(pid:3,tid:2)
,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:2,tid:4)
Create thread :(pid:1,tid:3)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
##end init.
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
ClientThread> start(pid:2,tid:1)
ClientThread> start(pid:1,tid:0)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
master > end(pid:1,tid:0)
ClientThread> start(pid:1,tid:6)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)ClientThread> start(pid:1,tid:9)

master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
*******************Start update per generation
0:0.676274
1:0.676274
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
ClientThread> start(pid:3,tid:15)
2,tid:16)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
###end middle.ClientThread> start(pid:2,tid:16)

master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:3,tid:17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:1,tid:19)
master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
2:7.81288e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:1,tid:23)
ClientThread> start(pid:3,tid:22)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:Create thread :(pid:1,tid:24)
Create thread :(pid:2,tid:24)
1,tid:24)ClientThread> start(pid:3,tid:28)

master > end(pid:3,tid:28)
getValue(pid:3,tid:28)
master> addKeyValue(pid:Create thread :(pid:3,tid:24)
3,tid:24)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.03(seconds).
TestF(-7.81288e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 94
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2)chen-5101(3) starts computing...

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-117.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
Create thread :(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)Create thread :(pid:2,tid:1)

##end init.
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:ClientThread> start(pid:1,tid:3)
2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:7)
1,tid:7)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:8)
3,tid:8)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3ClientThread> start(pid:2,tid:1)
,tid:2)
Create thread :(pid:3,tid:9)
master> addKeyValue(pid:3,tid:9ClientThread> start(pid:1,tid:0)
)
###end middle.
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)ClientThread> start(pid:2,tid:6)

master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6ClientThread> start(pid:1,tid:7)
)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
master > end(pid:1,tid:7)
getValue(pid:1,tid:7)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
ClientThread> start(pid:3,tid:9)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
ClientThread> start(pid:2,tid:8)
1,tid:9)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
*******************Start update per generation
0:0.0942015
1:0.0942015
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:ClientThread> start(pid:1,tid:13)
18)
master > end(pid:2,tid:11)
getValue(pid:ClientThread> start(pid:3,tid:12)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
###end middle.
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13ClientThread> start(pid:3,tid:16)
)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:ClientThread> start(pid:3,tid:17)
17)
master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
2:1.66949e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:ClientThread> start(pid:2,tid:17)
27)
ClientThread> start(pid:3,tid:17)
master > end(pid:2,tid:17)
master > end(pid:3,tid:17)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20ClientThread> start(pid:2,tid:21)
)
master> addKeyValue(pid:1,tid:28Create thread :(pid:1,tid:28)
)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21ClientThread> start(pid:3,tid:22)
)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)ClientThread> start(pid:1,tid:23)

###end middle.
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:Create thread :(pid:3,tid:27)
3,tid:27)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
ClientThread> start(pid:2,tid:29)
1,tid:27)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.end of program.

end used:0.031(seconds).
TestF(-1.66949e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 95
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(2) starts computing...chen-5101(3) starts computing...

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-118.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:3,tid:5)
ClientThread> start(pid:1,tid:6)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:1,tid:8)
Create thread :(pid:1,tid:8)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:1,tid:0)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:9)
2,tid:9)
###end middle.
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
ClientThread> start(pid:2,tid:9)
master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
*******************Start update per generation
0:0.828886
1:0.828886
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:2,tid:11)
master> addKeyValue(pid:1,tid:18)
Create thread :(pid:1,tid:13)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
Create thread :(pid:1,tid:18)
master> addKeyValue(pid:2,tid:19)Create thread :(pid:2,tid:19)

###end middle.
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
master> addKeyValue(pid:Create thread :(pid:3,tid:13)
3,tid:13)
ClientThread> start(pid:2,tid:17)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1ClientThread> start(pid:2,tid:19)
,tid:13)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
2:1.62213e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23ClientThread> start(pid:3,tid:13)
)
master> addKeyValue(pid:2,tid:24Create thread :(pid:2,tid:24)
)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:3,tid:13)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3,tid:29)Create thread :(pid:3,tid:29)

###end middle.
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:26)
master > end(pid:2,tid:26)
getValue(pid:2,tid:26)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end of program.

end used:0.021(seconds).
TestF(-1.62213e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 96
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2)chen-5101(3) starts computing...

 starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-119.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:2,tid:1)
Create thread :(pid:3,tid:2)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:2,tid:4)
ClientThread> start(pid:1,tid:0)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:7)
2,tid:7)
master > end(pid:1,tid:0)
ClientThread> start(pid:1,tid:6)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:8)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
3,tid:ClientThread> start(pid:2,tid:1)
1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:Create thread :(pid:2,tid:1)
2,tid:1)ClientThread> start(pid:1,tid:8)

master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
*******************Start update per generation
0:0.885753
1:0.885753
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14ClientThread> start(pid:3,tid:15)
)
master> addKeyValue(pid:2,tid:16)Create thread :(pid:2,tid:16)

master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:17)
3,tid:17)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)ClientThread> start(pid:1,tid:13)

master> addKeyValue(pid:2Create thread :(pid:2,tid:18)
,tid:18)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:19)
1,tid:19)
ClientThread> start(pid:2,tid:16)
###end middle.
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)ClientThread> start(pid:3,tid:17)

master > end(pid:3,tid:17)
getValue(pid:3,tid:17)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)ClientThread> start(pid:1,tid:19)

master > end(pid:1,tid:19)
getValue(pid:1,tid:19)
2:1.79273e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
ClientThread> start(pid:3,tid:22)
2,tid:28)ClientThread> start(pid:1,tid:23)

master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:ClientThread> start(pid:3,tid:26)
27)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)ClientThread> start(pid:3,tid:29)

master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
client(chen-5101(3)) exit.
end of program.
end of program.
end of program.
end used:0.02(seconds).
TestF(-1.79273e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 97
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-120.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:1,tid:0)
Create thread :(pid:2,tid:1)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:1,tid:6)
Create thread :(pid:1,tid:6)
Create thread :(pid:2,tid:4)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:2,tid:7)
ClientThread> start(pid:2,tid:1)
Create thread :(pid:2,tid:7)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
master> addKeyValue(pid:Create thread :(pid:2,tid:8)
2,tid:8)
ClientThread> start(pid:2,tid:8)
master > end(pid:2,tid:8)
getValue(pid:2,tid:8)
master> addKeyValue(pid:2Create thread :(pid:2,tid:9)
,tid:9)
###end middle.ClientThread> start(pid:2,tid:9)

master > end(pid:2,tid:9)
getValue(pid:2,tid:9)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:2,tid:7)
master > end(pid:2,tid:7)
getValue(pid:2,tid:7)
master> addKeyValue(pid:2,tid:Create thread :(pid:2,tid:5)
5)ClientThread> start(pid:2,tid:5)

master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2,tid:5)
Create thread :(pid:2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2,tid:5)
Create thread :(pid:2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2,tid:5)
Create thread :(pid:2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2,tid:5)
Create thread :(pid:2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2,tid:5)
Create thread :(pid:2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2,tid:5)
Create thread :(pid:2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2,tid:5)
Create thread :(pid:2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2,tid:5)
Create thread :(pid:2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2,tid:5)
Create thread :(pid:2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2,tid:5)
Create thread :(pid:2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:2,tid:5)
Create thread :(pid:2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2,tid:5)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:ClientThread> start(pid:3,tid:2)
3,tid:5)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:3Create thread :(pid:3,tid:5)
,tid:5)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:5)
3,tid:5)
ClientThread> start(pid:1,tid:6)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
*******************Start update per generation
0:0.250732
1:0.250732
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:2Create thread :(pid:2,tid:11)
,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:2Create thread :(pid:2,tid:14)
,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
ClientThread> start(pid:2,tid:5)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
master > end(pid:2,tid:5)
ClientThread> start(pid:2,tid:16)
master > end(pid:2,tid:16)
getValue(pid:2,tid:16)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master> addKeyValue(pid:Create thread :(pid:2,tid:18)
2,tid:18)
ClientThread> start(pid:1,tid:13)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
master> addKeyValue(pid:2Create thread :(pid:2,tid:19)
,tid:ClientThread> start(pid:2,tid:19)
19)
###end middle.
master > end(pid:2,tid:19)
getValue(pid:2,tid:19)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:15)
1,tid:15)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:11)
3,tid:11)
ClientThread> start(pid:1,tid:15)
master > end(pid:1,tid:15)
getValue(pid:1,tid:15)
master> addKeyValue(pid:Create thread :(pid:1,tid:11)
1,tid:11)
ClientThread> start(pid:3,tid:11)
master > end(pid:3,tid:11)
getValue(pid:3,tid:11)
2:9.58564e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:26)
ClientThread> start(pid:2,tid:21)
ClientThread> start(pid:3,tid:22)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:2,tid:24)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:28)
3,tid:28)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:1,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
master> addKeyValue(pid:Create thread :(pid:1,tid:29)
1,tid:29)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
ClientThread> start(pid:1,tid:11)
master > end(pid:1,tid:11)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:2Create thread :(pid:2,tid:25)
,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:Create thread :(pid:2,tid:25)
2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:Create thread :(pid:2,tid:25)
2,tid:25)
ClientThread> start(pid:1,tid:29)
master > end(pid:1,tid:29)
getValue(pid:1,tid:29)
master> addKeyValue(pid:1,tid:25)
Create thread :(pid:1,tid:25)
ClientThread> start(pid:1,tid:25)
master > end(pid:1,tid:25)
getValue(pid:1,tid:25)
master> addKeyValue(pid:1,tid:25)
Create thread :(pid:1,tid:25)
ClientThread> start(pid:1,tid:25)
master > end(pid:1,tid:25)
getValue(pid:1,tid:25)
master> addKeyValue(pid:1,tid:25)
Create thread :(pid:1,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:2,tid:25)
Create thread :(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
master> addKeyValue(pid:Create thread :(pid:2,tid:25)
2,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
ClientThread> start(pid:3,tid:25)
master > end(pid:2,tid:25)
getValue(pid:2,tid:25)
ClientThread> start(pid:2,tid:25)
master> addKeyValue(pid:2,tid:28)
Create thread :(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
ClientThread> start(pid:2,tid:28)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
end used:end of program.
end of program.
0.032ClientThread> start(pid:3,tid:28)
(seconds).
client(chen-5101(3)) exit.
end of program.
TestF(-9.58564e-317,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 98
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1) starts computing...chen-5101(2) starts computing...chen-5101(3) starts computing...


Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-121.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
ClientThread> start(pid:2,tid:4)
Create thread :(pid:3,tid:2)
master > end(pid:2,tid:4)
Create thread :(pid:3,tid:5)
getValue(pid:ClientThread> start(pid:3,tid:2)
2ClientThread> start(pid:3,tid:5)
,tid:4)
master> addKeyValue(pid:2,tid:6)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
Create thread :(pid:2,tid:6)
master> addKeyValue(pid:3,tid:7)
master > end(pid:3,tid:5)
getValue(pid:3,tid:5)
master> addKeyValue(pid:3,tid:8)
Create thread :(pid:3,tid:7)
Create thread :(pid:3,tid:8)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
ClientThread> start(pid:3,tid:8)
getValue(pid:3,tid:7)
master> addKeyValue(pid:3,tid:9)
###end middle.
master > end(pid:3,tid:8)
Create thread :(pid:3,tid:9)
getValue(pid:3,tid:8)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:3,tid:3)
Create thread :(pid:3,tid:3)
ClientThread> start(pid:3,tid:3)
master > end(pid:3,tid:3)
getValue(pid:3,tid:3)
master> addKeyValue(pid:3,tid:3)
Create thread :(pid:3,tid:3)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:3,tid:3)
master > end(pid:3,tid:3)
getValue(pid:3,tid:3)
master> addKeyValue(pid:3,tid:6)
Create thread :(pid:3,tid:6)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
ClientThread> start(pid:2,tid:6)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:Create thread :(pid:2,tid:6)
2,tid:6)
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
getValue(pid:3,tid:6)
master> addKeyValue(pid:Create thread :(pid:3,tid:6)
3,tid:6)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
*******************Start update per generation
0:0.184442
1:0.184442
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:3,tid:6)
master > end(pid:3,tid:6)
Create thread :(pid:2,tid:11)
Create thread :(pid:2,tid:14)
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
getValue(pid:2ClientThread> start(pid:2,tid:6)
,tid:11)
master> addKeyValue(pid:Create thread :(pid:2,tid:16)
2,tid:16)
master > end(pid:2,tid:6)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:2,tid:17)
ClientThread> start(pid:1,tid:13)
Create thread :(pid:2,tid:17)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:18)
1,tid:18)
ClientThread> start(pid:3,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:3Create thread :(pid:3,tid:19)
,tid:19)
###end middle.
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:1,tid:18)
master > end(pid:1,tid:18)
getValue(pid:1,tid:18)
master> addKeyValue(pid:Create thread :(pid:1,tid:15)
1,tid:15)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3Create thread :(pid:3,tid:16)
,tid:16)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)
2:1.68689e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:ClientThread> start(pid:2,tid:16)
2Create thread :(pid:2,tid:21)
,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
master > end(pid:2,tid:16)
ClientThread> start(pid:1,tid:15)
master > end(pid:1,tid:15)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:3,tid:26)
ClientThread> start(pid:1,tid:23)
Create thread :(pid:3,tid:26)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:1,tid:27)
Create thread :(pid:1,tid:27)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2,tid:28)
Create thread :(pid:2,tid:28)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
master> addKeyValue(pid:3,tid:29)
###end middle.
Create thread :(pid:3,tid:29)
ClientThread> start(pid:2,tid:28)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
ClientThread> start(pid:3,tid:29)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:Create thread :(pid:1,tid:25)
1,tid:25)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:21)
3,tid:21)
ClientThread> start(pid:3,tid:21)
master > end(pid:3,tid:21)
getValue(pid:3,tid:21)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(3)) exit.
end of program.end of program.
end used:0.036(seconds).

client(chen-5101(2)) exit.
end of program.
TestF(-1.68689e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 99
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
chen-5101(1)chen-5101(2) starts computing... starts computing...

Runing DE_for_PEC 
chen-5101(3)FunName(MyBestF,Optima)
 starts computing...
Save file:Run-configuration-122.txt
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:0)
1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
master> addKeyValue(pid:Create thread :(pid:1,tid:6)
1,tid:6)
ClientThread> start(pid:3,tid:5)
master > end(pid:3,tid:5)
getValue(pid:3ClientThread> start(pid:1,tid:0)
,tid:5)
master> addKeyValue(pid:Create thread :(pid:3,tid:7)
3,tid:7)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:8)
1,tid:ClientThread> start(pid:1,tid:6)
8)
master > end(pid:1,tid:6)
getValue(pid:1,tid:6)
master> addKeyValue(pid:Create thread :(pid:1,tid:9)
1,tid:9)
###end middle.
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:Create thread :(pid:3,tid:9)
3,tid:9)
ClientThread> start(pid:1,tid:8)
master > end(pid:1,tid:8)
getValue(pid:1,tid:8)
ClientThread> start(pid:1,tid:9)
master > end(pid:1,tid:9)
getValue(pid:1,tid:9)
master> addKeyValue(pid:Create thread :(pid:1,tid:4)
1,tid:4)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:4)
3,tid:4)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
getValue(pid:2,tid:4)
ClientThread> start(pid:3,tid:4)
master > end(pid:3,tid:4)
getValue(pid:3,tid:4)
master> addKeyValue(pid:Create thread :(pid:3,tid:1)
3,tid:1)
ClientThread> start(pid:1,tid:4)
master > end(pid:1,tid:4)
getValue(pid:1,tid:4)
master> addKeyValue(pid:Create thread :(pid:1,tid:1)
1,tid:1)
ClientThread> start(pid:3,tid:1)
master > end(pid:3,tid:1)
getValue(pid:3,tid:1)
*******************Start update per generation
0:0.463558
1:0.463558
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:Create thread :(pid:2,tid:11)
2,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:Create thread :(pid:2,tid:14)
2,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:Create thread :(pid:3,tid:16)
3,tid:16)
ClientThread> start(pid:1,tid:13)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
master> addKeyValue(pid:Create thread :(pid:1,tid:17)
1,tid:17)
ClientThread> start(pid:2,tid:11)
ClientThread> start(pid:3,tid:12)
master > end(pid:2,tid:11)
getValue(pid:2,tid:11)
master> addKeyValue(pid:2Create thread :(pid:2,tid:18)
,tid:18)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:19)
3,tid:19)
###end middle.
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
ClientThread> start(pid:2,tid:18)
master > end(pid:2,tid:18)
getValue(pid:2,tid:18)
ClientThread> start(pid:1,tid:17)
master > end(pid:1,tid:17)
getValue(pid:1,tid:17)
master> addKeyValue(pid:Create thread :(pid:1,tid:16)
1,tid:16)
ClientThread> start(pid:3,tid:19)
master > end(pid:3,tid:19)
getValue(pid:3,tid:19)
ClientThread> start(pid:1,tid:1)
master > end(pid:1,tid:1)
ClientThread> start(pid:1,tid:16)
master > end(pid:1,tid:16)
getValue(pid:1,tid:16)
master> addKeyValue(pid:Create thread :(pid:1,tid:16)
1,tid:16)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
2:1.80892e-316
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:3Create thread :(pid:3,tid:26)
,tid:26)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:27)
2,tid:27)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:28)
1,tid:28)
ClientThread> start(pid:2,tid:27)
master > end(pid:2,tid:27)
getValue(pid:2,tid:27)
master> addKeyValue(pid:Create thread :(pid:2,tid:29)
2,tid:29)
###end middle.
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
ClientThread> start(pid:2,tid:29)
master > end(pid:2,tid:29)
getValue(pid:2,tid:29)
ClientThread> start(pid:1,tid:28)
master > end(pid:1,tid:28)
getValue(pid:1,tid:28)
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
master> addKeyValue(pid:Create thread :(pid:1,tid:26)
1,tid:26)
ClientThread> start(pid:1,tid:16)
master > end(pid:1,tid:16)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)ClientThread> start(pid:1,tid:26)

master> addKeyValue(pid:Create thread :(pid:2,tid:26)
2,tid:26)
master > end(pid:1,tid:26)
getValue(pid:1,tid:26)
*******************end Start update per generation
Tic::client(chen-5101(1)) exit.
client(chen-5101(2)) exit.
end of program.
end of program.
endClientThread> start(pid:3,tid:26)
 used:client(0.029(seconds).
chen-5101(3)) exit.
end of program.
TestF(-1.80892e-316,100)
ends successfully!
end of program.

=====================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   EXIT CODE: 139
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
=====================================================================================
APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)
make: *** [parallel2] Error 139
.
.
.
Test Example # 100
mpic++ -DUSE_MPI main.cpp
mpirun -n 4 ./a.out
Runing DE_for_PEC 
FunName(MyBestF,Optima)
Save file:Run-configuration-123.txt
chen-5101(1) starts computing...
chen-5101(2) starts computing...
chen-5101(3) starts computing...
Tic::begin
chen-5101(0) starts computing...
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:1,tid:0)
master> addKeyValue(pid:2,tid:1)
master> addKeyValue(pid:3,tid:2)
master> addKeyValue(pid:1,tid:3)
master> addKeyValue(pid:2,tid:4)
master> addKeyValue(pid:3,tid:5)
##end init.
Create thread :(pid:1,tid:0)
Create thread :(pid:1,tid:3)
Create thread :(pid:2,tid:1)
Create thread :(pid:2,tid:4)
Create thread :(pid:3,tid:2)
Create thread :(pid:3,tid:5)
ClientThread> start(pid:2,tid:1)
master > end(pid:2,tid:1)
getValue(pid:2,tid:1)
master> addKeyValue(pid:2,tid:6)
Create thread :(pid:2,tid:6)
ClientThread> start(pid:3,tid:2)
master > end(pid:3,tid:2)
getValue(pid:3,tid:2)
master> addKeyValue(pid:3,tid:7)
Create thread :(pid:3,tid:7)
ClientThread> start(pid:3,tid:7)
master > end(pid:3,tid:7)
getValue(pid:3,tid:7)
master> addKeyValue(pid:3,tid:8)
Create thread :(pid:3,tid:8)
ClientThread> start(pid:3,tid:8)
master > end(pid:3,tid:8)
getValue(pid:3,tid:8)
master> addKeyValue(pid:3,tid:9)
###end middle.
Create thread :(pid:3,tid:9)
ClientThread> start(pid:3,tid:9)
master > end(pid:3,tid:9)
getValue(pid:3,tid:9)
ClientThread> start(pid:1,tid:3)
master > end(pid:1,tid:3)
getValue(pid:1,tid:3)
ClientThread> start(pid:1,tid:0)
master > end(pid:1,tid:0)
getValue(pid:1,tid:0)
master> addKeyValue(pid:Create thread :(pid:1,tid:4)
1,tid:4)
ClientThread> start(pid:2,tid:4)
master > end(pid:2,tid:4)
ClientThread> start(pid:2,tid:6)
getValue(pid:2,tid:4)
master > end(pid:2,tid:6)
getValue(pid:2,tid:6)
master> addKeyValue(pid:Create thread :(pid:2,tid:5)
2,tid:5)
ClientThread> start(pid:2,tid:5)
master > end(pid:2,tid:5)
getValue(pid:2ClientThread> start(pid:3,tid:5)
,tid:5)
*******************Start update per generation
0:0.0943717
1:0.0943717
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:10)
1,tid:10)
master> addKeyValue(pid:2Create thread :(pid:2,tid:11)
,tid:11)
master> addKeyValue(pid:Create thread :(pid:3,tid:12)
3,tid:12)
master> addKeyValue(pid:Create thread :(pid:1,tid:13)
1,tid:13)
master> addKeyValue(pid:2Create thread :(pid:2,tid:14)
,tid:14)
master> addKeyValue(pid:Create thread :(pid:3,tid:15)
3,tid:15)
##end init.
master > end(pid:3,tid:5)
ClientThread> start(pid:3,tid:15)
master > end(pid:3,tid:15)
getValue(pid:3,tid:15)
master> addKeyValue(pid:3Create thread :(pid:3,tid:16)
,tid:16)
ClientThread> start(pid:2,tid:14)
master > end(pid:2,tid:14)
getValue(pid:2,tid:14)
master> addKeyValue(pid:Create thread :(pid:2,tid:17)
2,tid:17)
ClientThread> start(pid:3,tid:16)
master > end(pid:3,tid:16)
getValue(pid:3,tid:16)ClientThread> start(pid:1,tid:4)

master> addKeyValue(pid:Create thread :(pid:3,tid:18)
3,tid:18)
master > end(pid:1,tid:4)
ClientThread> start(pid:2,tid:17)
master > end(pid:2,tid:17)
getValue(pid:2,tid:17)
master> addKeyValue(pid:Create thread :(pid:2,tid:19)
2,tid:19)
ClientThread> start(pid:3,tid:18)
###end middle.
master > end(pid:3,tid:18)
getValue(pid:3,tid:18)
ClientThread> start(pid:2,tid:19)
master > end(pid:2,tid:19)
getValue(pid:2,tid:ClientThread> start(pid:1,tid:13)
19)
master > end(pid:1,tid:13)
getValue(pid:1,tid:13)
ClientThread> start(pid:1,tid:10)
master > end(pid:1,tid:10)
getValue(pid:1,tid:10)
master> addKeyValue(pid:Create thread :(pid:1,tid:12)
ClientThread> start(pid:3,tid:12)
1,tid:12)
master > end(pid:3,tid:12)
getValue(pid:3,tid:12)
master> addKeyValue(pid:Create thread :(pid:3,tid:11)
3,tid:11)
ClientThread> start(pid:3,tid:11)
master > end(pid:3,tid:11)
getValue(pid:3,tid:11)
2:6.74437e-317
refreshID=0
numTasks=10
numSlave=3
master> addKeyValue(pid:Create thread :(pid:1,tid:20)
1,tid:20)
master> addKeyValue(pid:Create thread :(pid:2,tid:21)
2,tid:21)
master> addKeyValue(pid:Create thread :(pid:3,tid:22)
3,tid:22)
master> addKeyValue(pid:Create thread :(pid:1,tid:23)
1,tid:23)
master> addKeyValue(pid:Create thread :(pid:2,tid:24)
2,tid:24)
master> addKeyValue(pid:Create thread :(pid:3,tid:25)
3,tid:25)
##end init.
ClientThread> start(pid:2,tid:11)
master > end(pid:2,tid:11)
ClientThread> start(pid:3,tid:25)
master > end(pid:3,tid:25)
getValue(pid:3,tid:25)
master> addKeyValue(pid:Create thread :(pid:3,tid:26)
3,tid:26)
ClientThread> start(pid:1,tid:23)
master > end(pid:1,tid:23)
getValue(pid:1,tid:23)
master> addKeyValue(pid:Create thread :(pid:1,tid:27)
1,tid:27)
ClientThread> start(pid:2,tid:21)
master > end(pid:2,tid:21)
getValue(pid:2,tid:21)
master> addKeyValue(pid:Create thread :(pid:2,tid:28)
2,tid:28)
ClientThread> start(pid:3,tid:22)
master > end(pid:3,tid:22)
getValue(pid:3,tid:22)
master> addKeyValue(pid:Create thread :(pid:3,tid:29)
3,tid:29)
###end middle.
ClientThread> start(pid:1,tid:20)
master > end(pid:1,tid:20)
getValue(pid:1,tid:20)
ClientThread> start(pid:1,tid:27)
master > end(pid:1,tid:27)
getValue(pid:1,tid:27)
master> addKeyValue(pid:Create thread :(pid:1,tid:24)
1,tid:24)
ClientThread> start(pid:2,tid:28)
ClientThread> start(pid:3,tid:29)
master > end(pid:2,tid:28)
getValue(pid:2,tid:28)
master > end(pid:3,tid:29)
getValue(pid:3,tid:29)
ClientThread> start(pid:1,tid:12)
master > end(pid:1,tid:12)
ClientThread> start(pid:2,tid:24)
master > end(pid:2,tid:24)
getValue(pid:2,tid:24)
master> addKeyValue(pid:2Create thread :(pid:2,tid:26)
,tid:26)
ClientThread> start(pid:3,tid:26)
master > end(pid:3,tid:26)
getValue(pid:3,tid:26)
*******************end Start update per generation
Tic::end used:client(client(chen-5101(2)) exit.
0.024(seconds).
chen-5101(1)end of program.
) exit.
client(chen-5101(3)end of program.
) exit.
end of program.
TestF(-6.74437e-317,100)
ends successfully!
end of program.
.
.
.
